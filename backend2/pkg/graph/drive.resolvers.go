package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"mime"
	"path/filepath"
	"time"

	"github.com/dokedu/dokedu/backend/pkg/graph/generated"
	"github.com/dokedu/dokedu/backend/pkg/graph/model"
	"github.com/dokedu/dokedu/backend/pkg/middleware"
	"github.com/dokedu/dokedu/backend/pkg/msg"
	"github.com/dokedu/dokedu/backend/pkg/services/database/db"
)

// User is the resolver for the user field.
func (r *bucketResolver) User(ctx context.Context, obj *db.Bucket) (*db.User, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthorized
	}
	// If the bucket is not owned by a user, return nil.
	if !obj.UserID.Valid {
		return nil, nil
	}

	user, err := r.DB.Loader(ctx).Users(currentUser.User).Load(ctx, obj.ID)()
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *bucketResolver) DeletedAt(ctx context.Context, obj *db.Bucket) (*time.Time, error) {
	if !obj.DeletedAt.Time.IsZero() {
		return nil, nil
	}

	return &obj.DeletedAt.Time, nil
}

// Files is the resolver for the files field.
func (r *bucketResolver) Files(ctx context.Context, obj *db.Bucket) ([]db.File, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthorized
	}

	files, err := r.DB.FileListByBucketID(ctx, db.FileListByBucketIDParams{
		BucketID:       obj.ID,
		OrganisationID: currentUser.OrganisationID,
	})
	if err != nil {
		return nil, err
	}

	return files, nil
}

// MIMEType is the resolver for the MIMEType field.
func (r *fileResolver) MIMEType(ctx context.Context, obj *db.File) (string, error) {
	if !obj.MimeType.Valid {
		return obj.MimeType.String, nil
	}

	return mime.TypeByExtension(filepath.Ext(obj.Name)), nil
}

// Bucket is the resolver for the bucket field.
func (r *fileResolver) Bucket(ctx context.Context, obj *db.File) (*db.Bucket, error) {
	bucket, err := r.DB.BucketByID(ctx, db.BucketByIDParams{
		ID:             obj.BucketID,
		OrganisationID: obj.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	return &bucket, nil
}

// Parent is the resolver for the parent field.
func (r *fileResolver) Parent(ctx context.Context, obj *db.File) (*db.File, error) {
	if !obj.ParentID.Valid {
		return nil, nil
	}

	parent, err := r.DB.FileByID(ctx, db.FileByIDParams{
		ID:             obj.ParentID.String,
		OrganisationID: obj.OrganisationID,
	})

	if err != nil {
		return nil, err
	}

	return &parent, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *fileResolver) DeletedAt(ctx context.Context, obj *db.File) (*time.Time, error) {
	if !obj.DeletedAt.Time.IsZero() {
		return nil, nil
	}

	return &obj.DeletedAt.Time, nil
}

// Parents is the resolver for the parents field.
func (r *fileResolver) Parents(ctx context.Context, obj *db.File) ([]db.File, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthorized
	}

	files, err := r.DB.FileListByBucketID(ctx, db.FileListByBucketIDParams{
		BucketID:       obj.BucketID,
		OrganisationID: currentUser.OrganisationID,
	})
	if err != nil {
		return nil, err
	}

	return files, nil
}

// Files is the resolver for the files field.
func (r *fileResolver) Files(ctx context.Context, obj *db.File) ([]db.File, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthorized
	}

	files, err := r.DB.FileFindByParentID(ctx, db.FileFindByParentIDParams{
		ID:             obj.ID,
		OrganisationID: currentUser.OrganisationID,
	})
	if err != nil {
		return nil, err
	}

	return files, nil
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, input model.FileUploadInput) (*db.File, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, input model.DeleteFileInput) (*model.DeleteFilePayload, error) {
	panic(fmt.Errorf("not implemented: DeleteFile - deleteFile"))
}

// PreviewFile is the resolver for the previewFile field.
func (r *mutationResolver) PreviewFile(ctx context.Context, input model.PreviewFileInput) (*model.PreviewFilePayload, error) {
	panic(fmt.Errorf("not implemented: PreviewFile - previewFile"))
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*db.File, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthorized
	}

	file, err := r.DB.FileByID(ctx, db.FileByIDParams{
		ID:             id,
		OrganisationID: currentUser.OrganisationID,
	})
	if errors.Is(err, sql.ErrNoRows) {
		return nil, msg.ErrNotFound
	}
	return &file, err
}

// Bucket returns generated.BucketResolver implementation.
func (r *Resolver) Bucket() generated.BucketResolver { return &bucketResolver{r} }

// File returns generated.FileResolver implementation.
func (r *Resolver) File() generated.FileResolver { return &fileResolver{r} }

type bucketResolver struct{ *Resolver }
type fileResolver struct{ *Resolver }
