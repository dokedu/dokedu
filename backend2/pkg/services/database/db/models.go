// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatType string

const (
	ChatTypePrivate ChatType = "private"
	ChatTypeGroup   ChatType = "group"
	ChatTypeChannel ChatType = "channel"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType
	Valid    bool // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type CompetenceType string

const (
	CompetenceTypeSubject    CompetenceType = "subject"
	CompetenceTypeGroup      CompetenceType = "group"
	CompetenceTypeCompetence CompetenceType = "competence"
)

func (e *CompetenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompetenceType(s)
	case string:
		*e = CompetenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for CompetenceType: %T", src)
	}
	return nil
}

type NullCompetenceType struct {
	CompetenceType CompetenceType
	Valid          bool // Valid is true if CompetenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompetenceType) Scan(value interface{}) error {
	if value == nil {
		ns.CompetenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompetenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompetenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompetenceType), nil
}

type FilePermission string

const (
	FilePermissionViewer  FilePermission = "viewer"
	FilePermissionManager FilePermission = "manager"
)

func (e *FilePermission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FilePermission(s)
	case string:
		*e = FilePermission(s)
	default:
		return fmt.Errorf("unsupported scan type for FilePermission: %T", src)
	}
	return nil
}

type NullFilePermission struct {
	FilePermission FilePermission
	Valid          bool // Valid is true if FilePermission is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilePermission) Scan(value interface{}) error {
	if value == nil {
		ns.FilePermission, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FilePermission.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilePermission) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FilePermission), nil
}

type FileType string

const (
	FileTypeBlob   FileType = "blob"
	FileTypeFolder FileType = "folder"
)

func (e *FileType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileType(s)
	case string:
		*e = FileType(s)
	default:
		return fmt.Errorf("unsupported scan type for FileType: %T", src)
	}
	return nil
}

type NullFileType struct {
	FileType FileType
	Valid    bool // Valid is true if FileType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFileType) Scan(value interface{}) error {
	if value == nil {
		ns.FileType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FileType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFileType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FileType), nil
}

type ReportFormat string

const (
	ReportFormatDocx ReportFormat = "docx"
	ReportFormatPdf  ReportFormat = "pdf"
	ReportFormatHtml ReportFormat = "html"
	ReportFormatCsv  ReportFormat = "csv"
	ReportFormatXlsx ReportFormat = "xlsx"
)

func (e *ReportFormat) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportFormat(s)
	case string:
		*e = ReportFormat(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportFormat: %T", src)
	}
	return nil
}

type NullReportFormat struct {
	ReportFormat ReportFormat
	Valid        bool // Valid is true if ReportFormat is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportFormat) Scan(value interface{}) error {
	if value == nil {
		ns.ReportFormat, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportFormat.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportFormat) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportFormat), nil
}

type ReportKind string

const (
	ReportKindEntries            ReportKind = "entries"
	ReportKindSubjects           ReportKind = "subjects"
	ReportKindCompetences        ReportKind = "competences"
	ReportKindLearnedCompetences ReportKind = "learned_competences"
	ReportKindAllEntries         ReportKind = "all_entries"
)

func (e *ReportKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportKind(s)
	case string:
		*e = ReportKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportKind: %T", src)
	}
	return nil
}

type NullReportKind struct {
	ReportKind ReportKind
	Valid      bool // Valid is true if ReportKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportKind) Scan(value interface{}) error {
	if value == nil {
		ns.ReportKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportKind), nil
}

type ReportStatus string

const (
	ReportStatusPending    ReportStatus = "pending"
	ReportStatusProcessing ReportStatus = "processing"
	ReportStatusDone       ReportStatus = "done"
	ReportStatusError      ReportStatus = "error"
)

func (e *ReportStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReportStatus(s)
	case string:
		*e = ReportStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReportStatus: %T", src)
	}
	return nil
}

type NullReportStatus struct {
	ReportStatus ReportStatus
	Valid        bool // Valid is true if ReportStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReportStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReportStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReportStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReportStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReportStatus), nil
}

type UserAttendanceState string

const (
	UserAttendanceStateUNKNOWN UserAttendanceState = "UNKNOWN"
	UserAttendanceStatePRESENT UserAttendanceState = "PRESENT"
	UserAttendanceStateABSENT  UserAttendanceState = "ABSENT"
	UserAttendanceStateLATE    UserAttendanceState = "LATE"
	UserAttendanceStateSICK    UserAttendanceState = "SICK"
)

func (e *UserAttendanceState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserAttendanceState(s)
	case string:
		*e = UserAttendanceState(s)
	default:
		return fmt.Errorf("unsupported scan type for UserAttendanceState: %T", src)
	}
	return nil
}

type NullUserAttendanceState struct {
	UserAttendanceState UserAttendanceState
	Valid               bool // Valid is true if UserAttendanceState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserAttendanceState) Scan(value interface{}) error {
	if value == nil {
		ns.UserAttendanceState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserAttendanceState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserAttendanceState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserAttendanceState), nil
}

type UserLang string

const (
	UserLangEn UserLang = "en"
	UserLangDe UserLang = "de"
)

func (e *UserLang) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserLang(s)
	case string:
		*e = UserLang(s)
	default:
		return fmt.Errorf("unsupported scan type for UserLang: %T", src)
	}
	return nil
}

type NullUserLang struct {
	UserLang UserLang
	Valid    bool // Valid is true if UserLang is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserLang) Scan(value interface{}) error {
	if value == nil {
		ns.UserLang, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserLang.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserLang) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserLang), nil
}

type UserRole string

const (
	UserRoleOwner    UserRole = "owner"
	UserRoleAdmin    UserRole = "admin"
	UserRoleTeacher  UserRole = "teacher"
	UserRoleEducator UserRole = "educator"
	UserRoleStudent  UserRole = "student"
	UserRoleParent   UserRole = "parent"
	UserRoleBot      UserRole = "bot"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStudentSchoolHistoryAction string

const (
	UserStudentSchoolHistoryActionEnrolled    UserStudentSchoolHistoryAction = "enrolled"
	UserStudentSchoolHistoryActionGraduated   UserStudentSchoolHistoryAction = "graduated"
	UserStudentSchoolHistoryActionTransferred UserStudentSchoolHistoryAction = "transferred"
	UserStudentSchoolHistoryActionSuspended   UserStudentSchoolHistoryAction = "suspended"
	UserStudentSchoolHistoryActionExpelled    UserStudentSchoolHistoryAction = "expelled"
	UserStudentSchoolHistoryActionRepeated    UserStudentSchoolHistoryAction = "repeated"
	UserStudentSchoolHistoryActionJumped      UserStudentSchoolHistoryAction = "jumped"
)

func (e *UserStudentSchoolHistoryAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStudentSchoolHistoryAction(s)
	case string:
		*e = UserStudentSchoolHistoryAction(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStudentSchoolHistoryAction: %T", src)
	}
	return nil
}

type NullUserStudentSchoolHistoryAction struct {
	UserStudentSchoolHistoryAction UserStudentSchoolHistoryAction
	Valid                          bool // Valid is true if UserStudentSchoolHistoryAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStudentSchoolHistoryAction) Scan(value interface{}) error {
	if value == nil {
		ns.UserStudentSchoolHistoryAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStudentSchoolHistoryAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStudentSchoolHistoryAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStudentSchoolHistoryAction), nil
}

type Address struct {
	ID             string             `db:"id"`
	Address1       pgtype.Text        `db:"address_1"`
	Address2       pgtype.Text        `db:"address_2"`
	Address3       pgtype.Text        `db:"address_3"`
	PostalCode     pgtype.Text        `db:"postal_code"`
	City           pgtype.Text        `db:"city"`
	State          pgtype.Text        `db:"state"`
	Country        pgtype.Text        `db:"country"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type Bucket struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	Shared         bool               `db:"shared"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	UserID         pgtype.Text        `db:"user_id"`
}

type Competence struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	CompetenceID   pgtype.Text        `db:"competence_id"`
	CompetenceType CompetenceType     `db:"competence_type"`
	OrganisationID string             `db:"organisation_id"`
	Grades         []int32            `db:"grades"`
	Color          pgtype.Text        `db:"color"`
	CurriculumID   pgtype.Text        `db:"curriculum_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	SortOrder      pgtype.Int4        `db:"sort_order"`
	CreatedBy      pgtype.Text        `db:"created_by"`
}

type Entry struct {
	ID             string             `db:"id"`
	Date           pgtype.Date        `db:"date"`
	Body           string             `db:"body"`
	UserID         string             `db:"user_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	OrganisationID string             `db:"organisation_id"`
}

type EntryEvent struct {
	ID             string             `db:"id"`
	EntryID        string             `db:"entry_id"`
	EventID        string             `db:"event_id"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type EntryFile struct {
	ID             string             `db:"id"`
	EntryID        string             `db:"entry_id"`
	FileID         string             `db:"file_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	OrganisationID string             `db:"organisation_id"`
}

type EntryTag struct {
	ID             string             `db:"id"`
	EntryID        string             `db:"entry_id"`
	TagID          string             `db:"tag_id"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type EntryUser struct {
	ID             string             `db:"id"`
	EntryID        string             `db:"entry_id"`
	UserID         string             `db:"user_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	OrganisationID string             `db:"organisation_id"`
}

type Event struct {
	ID             string             `db:"id"`
	ImageFileID    pgtype.Text        `db:"image_file_id"`
	OrganisationID string             `db:"organisation_id"`
	Title          string             `db:"title"`
	Body           string             `db:"body"`
	StartsAt       time.Time          `db:"starts_at"`
	EndsAt         time.Time          `db:"ends_at"`
	Recurrence     []string           `db:"recurrence"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type EventCompetence struct {
	ID             string             `db:"id"`
	EventID        string             `db:"event_id"`
	CompetenceID   string             `db:"competence_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	OrganisationID string             `db:"organisation_id"`
}

type File struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	FileType       FileType           `db:"file_type"`
	MimeType       pgtype.Text        `db:"mime_type"`
	Size           int64              `db:"size"`
	BucketID       string             `db:"bucket_id"`
	ParentID       pgtype.Text        `db:"parent_id"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type Organisation struct {
	ID                   string             `db:"id"`
	Name                 string             `db:"name"`
	LegalName            string             `db:"legal_name"`
	Website              string             `db:"website"`
	Phone                string             `db:"phone"`
	OwnerID              string             `db:"owner_id"`
	AllowedDomains       []string           `db:"allowed_domains"`
	EnabledApps          []string           `db:"enabled_apps"`
	CreatedAt            time.Time          `db:"created_at"`
	DeletedAt            pgtype.Timestamptz `db:"deleted_at"`
	SetupComplete        bool               `db:"setup_complete"`
	Address              string             `db:"address"`
	LogoUrl              string             `db:"logo_url"`
	StripeCustomerID     pgtype.Text        `db:"stripe_customer_id"`
	StripeSubscriptionID pgtype.Text        `db:"stripe_subscription_id"`
}

type Report struct {
	ID             string             `db:"id"`
	Status         ReportStatus       `db:"status"`
	Format         ReportFormat       `db:"format"`
	Kind           ReportKind         `db:"kind"`
	From           time.Time          `db:"from"`
	To             time.Time          `db:"to"`
	Meta           json.RawMessage    `db:"meta"`
	FilterTags     []string           `db:"filter_tags"`
	FileID         pgtype.Text        `db:"file_id"`
	UserID         string             `db:"user_id"`
	StudentUserID  string             `db:"student_user_id"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type ReportTemplate struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	Description    string             `db:"description"`
	Format         string             `db:"format"`
	Template       string             `db:"template"`
	Component      bool               `db:"component"`
	Settings       json.RawMessage    `db:"settings"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      pgtype.Timestamptz `db:"created_at"`
}

type School struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	AddressID      pgtype.Text        `db:"address_id"`
	Phone          pgtype.Text        `db:"phone"`
	Email          pgtype.Text        `db:"email"`
	Website        pgtype.Text        `db:"website"`
	Description    pgtype.Text        `db:"description"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type SchoolYear struct {
	ID             string             `db:"id"`
	Year           int32              `db:"year"`
	Description    pgtype.Text        `db:"description"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type Session struct {
	ID        string             `db:"id"`
	UserID    string             `db:"user_id"`
	Token     string             `db:"token"`
	CreatedAt time.Time          `db:"created_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at"`
}

type Subject struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type Tag struct {
	ID             string             `db:"id"`
	Name           string             `db:"name"`
	Color          pgtype.Text        `db:"color"`
	OrganisationID string             `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type User struct {
	ID             string             `db:"id"`
	Role           UserRole           `db:"role"`
	OrganisationID string             `db:"organisation_id"`
	FirstName      string             `db:"first_name"`
	LastName       string             `db:"last_name"`
	Email          pgtype.Text        `db:"email"`
	Password       pgtype.Text        `db:"password"`
	RecoveryToken  pgtype.Text        `db:"recovery_token"`
	RecoverySentAt pgtype.Timestamptz `db:"recovery_sent_at"`
	AvatarFileID   pgtype.Text        `db:"avatar_file_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	Language       NullUserLang       `db:"language"`
	Sex            pgtype.Text        `db:"sex"`
}

type UserAddressHistory struct {
	ID             string             `db:"id"`
	UserID         string             `db:"user_id"`
	AddressID      string             `db:"address_id"`
	StartDate      pgtype.Date        `db:"start_date"`
	EndDate        pgtype.Date        `db:"end_date"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type UserAttendance struct {
	ID             string              `db:"id"`
	UserID         string              `db:"user_id"`
	Date           pgtype.Date         `db:"date"`
	State          UserAttendanceState `db:"state"`
	CreatedBy      string              `db:"created_by"`
	OrganisationID string              `db:"organisation_id"`
	CreatedAt      time.Time           `db:"created_at"`
	DeletedAt      pgtype.Timestamptz  `db:"deleted_at"`
}

type UserCompetence struct {
	ID             string             `db:"id"`
	Level          int32              `db:"level"`
	UserID         string             `db:"user_id"`
	EntryID        pgtype.Text        `db:"entry_id"`
	CompetenceID   string             `db:"competence_id"`
	CreatedAt      time.Time          `db:"created_at"`
	CreatedBy      pgtype.Text        `db:"created_by"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
	OrganisationID string             `db:"organisation_id"`
}

type UserRelationship struct {
	ID               string             `db:"id"`
	UserID           string             `db:"user_id"`
	StudentID        string             `db:"student_id"`
	RelationshipType string             `db:"relationship_type"`
	OrganisationID   pgtype.Text        `db:"organisation_id"`
	CreatedAt        time.Time          `db:"created_at"`
	DeletedAt        pgtype.Timestamptz `db:"deleted_at"`
}

type UserStudent struct {
	ID                 string             `db:"id"`
	UserID             string             `db:"user_id"`
	OrganisationID     string             `db:"organisation_id"`
	LeftAt             pgtype.Timestamptz `db:"left_at"`
	Grade              int32              `db:"grade"`
	Birthday           pgtype.Date        `db:"birthday"`
	Nationality        pgtype.Text        `db:"nationality"`
	Comments           pgtype.Text        `db:"comments"`
	JoinedAt           pgtype.Timestamptz `db:"joined_at"`
	CreatedAt          time.Time          `db:"created_at"`
	DeletedAt          pgtype.Timestamptz `db:"deleted_at"`
	Birthplace         pgtype.Text        `db:"birthplace"`
	Emoji              pgtype.Text        `db:"emoji"`
	MissedHours        pgtype.Int4        `db:"missed_hours"`
	MissedHoursExcused pgtype.Int4        `db:"missed_hours_excused"`
}

type UserStudentGrade struct {
	ID             string             `db:"id"`
	UserStudentID  string             `db:"user_student_id"`
	SubjectID      string             `db:"subject_id"`
	Grade          int32              `db:"grade"`
	SchoolYearID   string             `db:"school_year_id"`
	OrganisationID pgtype.Text        `db:"organisation_id"`
	CreatedAt      time.Time          `db:"created_at"`
	DeletedAt      pgtype.Timestamptz `db:"deleted_at"`
}

type UserStudentSchoolHistory struct {
	ID             string                         `db:"id"`
	UserStudentID  string                         `db:"user_student_id"`
	SchoolID       string                         `db:"school_id"`
	Action         UserStudentSchoolHistoryAction `db:"action"`
	SchoolYearID   string                         `db:"school_year_id"`
	OrganisationID pgtype.Text                    `db:"organisation_id"`
	CreatedAt      time.Time                      `db:"created_at"`
	DeletedAt      pgtype.Timestamptz             `db:"deleted_at"`
}
