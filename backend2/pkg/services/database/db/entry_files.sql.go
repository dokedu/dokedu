// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_files.sql

package db

import (
	"context"
)

const filesFindByEntryFileEntryID = `-- name: FilesFindByEntryFileEntryID :many
SELECT files.id, files.name, files.file_type, files.mime_type, files.size, files.bucket_id, files.parent_id, files.organisation_id, files.created_at, files.deleted_at
FROM files
         JOIN public.entry_files eu ON files.id = eu.file_id
         JOIN public.entries e ON eu.entry_id = e.id AND e.id = $1
WHERE files.organisation_id = $2
  AND eu.deleted_at IS NULL
  AND e.deleted_at IS NULL
  AND files.deleted_at IS NULL
`

type FilesFindByEntryFileEntryIDParams struct {
	EntryID        string `db:"entry_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) FilesFindByEntryFileEntryID(ctx context.Context, arg FilesFindByEntryFileEntryIDParams) ([]File, error) {
	rows, err := q.db.Query(ctx, filesFindByEntryFileEntryID, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FileType,
			&i.MimeType,
			&i.Size,
			&i.BucketID,
			&i.ParentID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
