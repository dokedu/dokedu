// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_tag.sql

package db

import (
	"context"
)

const entryTagCreate = `-- name: EntryTagCreate :one
INSERT INTO entry_tags (entry_id, tag_id, organisation_id)
VALUES ($1, $2, $3)
ON CONFLICT (entry_id, tag_id) DO UPDATE SET deleted_at = NULL
RETURNING id, entry_id, tag_id, organisation_id, created_at, deleted_at
`

type EntryTagCreateParams struct {
	EntryID        string `db:"entry_id"`
	TagID          string `db:"tag_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryTagCreate(ctx context.Context, arg EntryTagCreateParams) (EntryTag, error) {
	row := q.db.QueryRow(ctx, entryTagCreate, arg.EntryID, arg.TagID, arg.OrganisationID)
	var i EntryTag
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.TagID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const entryTagSoftDelete = `-- name: EntryTagSoftDelete :one
UPDATE entry_tags
SET deleted_at = NOW()
WHERE entry_id = $1
  AND tag_id = $2
  AND organisation_id = $3
RETURNING id, entry_id, tag_id, organisation_id, created_at, deleted_at
`

type EntryTagSoftDeleteParams struct {
	EntryID        string `db:"entry_id"`
	TagID          string `db:"tag_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryTagSoftDelete(ctx context.Context, arg EntryTagSoftDeleteParams) (EntryTag, error) {
	row := q.db.QueryRow(ctx, entryTagSoftDelete, arg.EntryID, arg.TagID, arg.OrganisationID)
	var i EntryTag
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.TagID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const tagsFindByEntryTagEntryID = `-- name: TagsFindByEntryTagEntryID :many
SELECT tags.id, tags.name, tags.color, tags.organisation_id, tags.created_at, tags.deleted_at
FROM tags
         JOIN public.entry_tags eu ON tags.id = eu.tag_id
         JOIN public.entries e ON eu.entry_id = e.id AND e.id = $1
WHERE tags.organisation_id = $2
  AND eu.deleted_at IS NULL
  AND e.deleted_at IS NULL
  AND tags.deleted_at IS NULL
`

type TagsFindByEntryTagEntryIDParams struct {
	EntryID        string `db:"entry_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) TagsFindByEntryTagEntryID(ctx context.Context, arg TagsFindByEntryTagEntryIDParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, tagsFindByEntryTagEntryID, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
