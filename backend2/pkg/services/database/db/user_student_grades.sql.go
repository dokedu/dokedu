// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_student_grades.sql

package db

import (
	"context"
)

const userStudentGradeFindByID = `-- name: UserStudentGradeFindByID :one
select id, user_student_id, subject_id, grade, school_year_id, organisation_id, created_at, deleted_at from user_student_grades
where id = $1 and organisation_id = $2::text and deleted_at is null
`

type UserStudentGradeFindByIDParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserStudentGradeFindByID(ctx context.Context, arg UserStudentGradeFindByIDParams) (UserStudentGrade, error) {
	row := q.db.QueryRow(ctx, userStudentGradeFindByID, arg.ID, arg.OrganisationID)
	var i UserStudentGrade
	err := row.Scan(
		&i.ID,
		&i.UserStudentID,
		&i.SubjectID,
		&i.Grade,
		&i.SchoolYearID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userStudentGradesAllPaginated = `-- name: UserStudentGradesAllPaginated :many
select id, user_student_id, subject_id, grade, school_year_id, organisation_id, created_at, deleted_at from user_student_grades
where organisation_id = $1::text and deleted_at is null
limit $3 offset $2
`

type UserStudentGradesAllPaginatedParams struct {
	OrganisationID string `db:"organisation_id"`
	Offset         int32  `db:"_offset"`
	Limit          int32  `db:"_limit"`
}

func (q *Queries) UserStudentGradesAllPaginated(ctx context.Context, arg UserStudentGradesAllPaginatedParams) ([]UserStudentGrade, error) {
	rows, err := q.db.Query(ctx, userStudentGradesAllPaginated, arg.OrganisationID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStudentGrade
	for rows.Next() {
		var i UserStudentGrade
		if err := rows.Scan(
			&i.ID,
			&i.UserStudentID,
			&i.SubjectID,
			&i.Grade,
			&i.SchoolYearID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
