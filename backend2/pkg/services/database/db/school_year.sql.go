// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: school_year.sql

package db

import (
	"context"
)

const schoolYearAllPaginated = `-- name: SchoolYearAllPaginated :many
select id, year, description, organisation_id, created_at, deleted_at
from school_years
where organisation_id = $1::text
and deleted_at is null
order by year desc
limit $3
offset $2
`

type SchoolYearAllPaginatedParams struct {
	OrganisationID string `db:"organisation_id"`
	Offset         int32  `db:"_offset"`
	Limit          int32  `db:"_limit"`
}

func (q *Queries) SchoolYearAllPaginated(ctx context.Context, arg SchoolYearAllPaginatedParams) ([]SchoolYear, error) {
	rows, err := q.db.Query(ctx, schoolYearAllPaginated, arg.OrganisationID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchoolYear
	for rows.Next() {
		var i SchoolYear
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.Description,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const schoolYearCreate = `-- name: SchoolYearCreate :one
insert into school_years (year, organisation_id)
values ($1, $2::text)
returning id, year, description, organisation_id, created_at, deleted_at
`

type SchoolYearCreateParams struct {
	Year           int32  `db:"year"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) SchoolYearCreate(ctx context.Context, arg SchoolYearCreateParams) (SchoolYear, error) {
	row := q.db.QueryRow(ctx, schoolYearCreate, arg.Year, arg.OrganisationID)
	var i SchoolYear
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Description,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const schoolYearFindByID = `-- name: SchoolYearFindByID :one
select id, year, description, organisation_id, created_at, deleted_at
from school_years
where id = $1 and organisation_id = $2::text
and deleted_at is null
`

type SchoolYearFindByIDParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) SchoolYearFindByID(ctx context.Context, arg SchoolYearFindByIDParams) (SchoolYear, error) {
	row := q.db.QueryRow(ctx, schoolYearFindByID, arg.ID, arg.OrganisationID)
	var i SchoolYear
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Description,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const schoolYearSoftDelete = `-- name: SchoolYearSoftDelete :one
update school_years
set deleted_at = now()
where id = $1 and organisation_id = $2::text
returning id, year, description, organisation_id, created_at, deleted_at
`

type SchoolYearSoftDeleteParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) SchoolYearSoftDelete(ctx context.Context, arg SchoolYearSoftDeleteParams) (SchoolYear, error) {
	row := q.db.QueryRow(ctx, schoolYearSoftDelete, arg.ID, arg.OrganisationID)
	var i SchoolYear
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Description,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const schoolYearUpdate = `-- name: SchoolYearUpdate :one
update school_years
set year = $1
where id = $2 and organisation_id = $3::text
returning id, year, description, organisation_id, created_at, deleted_at
`

type SchoolYearUpdateParams struct {
	Year           int32  `db:"year"`
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) SchoolYearUpdate(ctx context.Context, arg SchoolYearUpdateParams) (SchoolYear, error) {
	row := q.db.QueryRow(ctx, schoolYearUpdate, arg.Year, arg.ID, arg.OrganisationID)
	var i SchoolYear
	err := row.Scan(
		&i.ID,
		&i.Year,
		&i.Description,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const schoolYearsFindByID = `-- name: SchoolYearsFindByID :many
select id, year, description, organisation_id, created_at, deleted_at
from school_years
where id = any($1::text[]) and organisation_id = $2::text and deleted_at is null
`

type SchoolYearsFindByIDParams struct {
	Ids            []string `db:"ids"`
	OrganisationID string   `db:"organisation_id"`
}

func (q *Queries) SchoolYearsFindByID(ctx context.Context, arg SchoolYearsFindByIDParams) ([]SchoolYear, error) {
	rows, err := q.db.Query(ctx, schoolYearsFindByID, arg.Ids, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchoolYear
	for rows.Next() {
		var i SchoolYear
		if err := rows.Scan(
			&i.ID,
			&i.Year,
			&i.Description,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
