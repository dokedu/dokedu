// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_student.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userStudentCount = `-- name: UserStudentCount :one
SELECT COUNT(*)
FROM user_students
WHERE organisation_id = $1 AND deleted_at is null
`

func (q *Queries) UserStudentCount(ctx context.Context, organisationID string) (int64, error) {
	row := q.db.QueryRow(ctx, userStudentCount, organisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userStudentCreate = `-- name: UserStudentCreate :one
INSERT INTO user_students (user_id, organisation_id, left_at, grade, birthday, joined_at, emoji)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
`

type UserStudentCreateParams struct {
	UserID         string             `db:"user_id"`
	OrganisationID string             `db:"organisation_id"`
	LeftAt         pgtype.Timestamptz `db:"left_at"`
	Grade          int32              `db:"grade"`
	Birthday       pgtype.Date        `db:"birthday"`
	JoinedAt       pgtype.Timestamptz `db:"joined_at"`
	Emoji          pgtype.Text        `db:"emoji"`
}

func (q *Queries) UserStudentCreate(ctx context.Context, arg UserStudentCreateParams) (UserStudent, error) {
	row := q.db.QueryRow(ctx, userStudentCreate,
		arg.UserID,
		arg.OrganisationID,
		arg.LeftAt,
		arg.Grade,
		arg.Birthday,
		arg.JoinedAt,
		arg.Emoji,
	)
	var i UserStudent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganisationID,
		&i.LeftAt,
		&i.Grade,
		&i.Birthday,
		&i.Nationality,
		&i.Comments,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Birthplace,
		&i.Emoji,
		&i.MissedHours,
		&i.MissedHoursExcused,
	)
	return i, err
}

const userStudentFind = `-- name: UserStudentFind :many
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE organisation_id = $1 AND deleted_at is null
`

// TODO: should this not be `UserStudentsFind` (mind the plural)?
func (q *Queries) UserStudentFind(ctx context.Context, organisationID string) ([]UserStudent, error) {
	rows, err := q.db.Query(ctx, userStudentFind, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStudent
	for rows.Next() {
		var i UserStudent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganisationID,
			&i.LeftAt,
			&i.Grade,
			&i.Birthday,
			&i.Nationality,
			&i.Comments,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Birthplace,
			&i.Emoji,
			&i.MissedHours,
			&i.MissedHoursExcused,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userStudentFindByActualUserID = `-- name: UserStudentFindByActualUserID :one
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE user_id = $1
  AND organisation_id = $2
  AND deleted_at is null
LIMIT 1
`

type UserStudentFindByActualUserIDParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserStudentFindByActualUserID(ctx context.Context, arg UserStudentFindByActualUserIDParams) (UserStudent, error) {
	row := q.db.QueryRow(ctx, userStudentFindByActualUserID, arg.UserID, arg.OrganisationID)
	var i UserStudent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganisationID,
		&i.LeftAt,
		&i.Grade,
		&i.Birthday,
		&i.Nationality,
		&i.Comments,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Birthplace,
		&i.Emoji,
		&i.MissedHours,
		&i.MissedHoursExcused,
	)
	return i, err
}

const userStudentFindByUserID = `-- name: UserStudentFindByUserID :one
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at is null
LIMIT 1
`

type UserStudentFindByUserIDParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

// TODO: should this not filter by `user_id` instead of `id`? In theory it could be the same, but in practice it is not
func (q *Queries) UserStudentFindByUserID(ctx context.Context, arg UserStudentFindByUserIDParams) (UserStudent, error) {
	row := q.db.QueryRow(ctx, userStudentFindByUserID, arg.ID, arg.OrganisationID)
	var i UserStudent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganisationID,
		&i.LeftAt,
		&i.Grade,
		&i.Birthday,
		&i.Nationality,
		&i.Comments,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Birthplace,
		&i.Emoji,
		&i.MissedHours,
		&i.MissedHoursExcused,
	)
	return i, err
}

const userStudentFindPaginated = `-- name: UserStudentFindPaginated :many
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE organisation_id = $1 AND deleted_at is null
LIMIT $3 OFFSET $2
`

type UserStudentFindPaginatedParams struct {
	OrganisationID string `db:"organisation_id"`
	Offset         int32  `db:"_offset"`
	Limit          int32  `db:"_limit"`
}

func (q *Queries) UserStudentFindPaginated(ctx context.Context, arg UserStudentFindPaginatedParams) ([]UserStudent, error) {
	rows, err := q.db.Query(ctx, userStudentFindPaginated, arg.OrganisationID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStudent
	for rows.Next() {
		var i UserStudent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganisationID,
			&i.LeftAt,
			&i.Grade,
			&i.Birthday,
			&i.Nationality,
			&i.Comments,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Birthplace,
			&i.Emoji,
			&i.MissedHours,
			&i.MissedHoursExcused,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userStudentSoftDeleteByUserID = `-- name: UserStudentSoftDeleteByUserID :one
UPDATE user_students
SET deleted_at = now()
WHERE user_id = $1
  AND organisation_id = $2
RETURNING id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
`

type UserStudentSoftDeleteByUserIDParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserStudentSoftDeleteByUserID(ctx context.Context, arg UserStudentSoftDeleteByUserIDParams) (UserStudent, error) {
	row := q.db.QueryRow(ctx, userStudentSoftDeleteByUserID, arg.UserID, arg.OrganisationID)
	var i UserStudent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganisationID,
		&i.LeftAt,
		&i.Grade,
		&i.Birthday,
		&i.Nationality,
		&i.Comments,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Birthplace,
		&i.Emoji,
		&i.MissedHours,
		&i.MissedHoursExcused,
	)
	return i, err
}

const userStudentUpdate = `-- name: UserStudentUpdate :one
UPDATE user_students
SET grade = $1, birthday = $2, left_at = $3, joined_at = $4, emoji = $5, missed_hours = $6, missed_hours_excused = $7
WHERE user_id = $8
  AND organisation_id = $9
RETURNING id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
`

type UserStudentUpdateParams struct {
	Grade              int32              `db:"grade"`
	Birthday           pgtype.Date        `db:"birthday"`
	LeftAt             pgtype.Timestamptz `db:"left_at"`
	JoinedAt           pgtype.Timestamptz `db:"joined_at"`
	Emoji              pgtype.Text        `db:"emoji"`
	MissedHours        pgtype.Int4        `db:"missed_hours"`
	MissedHoursExcused pgtype.Int4        `db:"missed_hours_excused"`
	UserID             string             `db:"user_id"`
	OrganisationID     string             `db:"organisation_id"`
}

func (q *Queries) UserStudentUpdate(ctx context.Context, arg UserStudentUpdateParams) (UserStudent, error) {
	row := q.db.QueryRow(ctx, userStudentUpdate,
		arg.Grade,
		arg.Birthday,
		arg.LeftAt,
		arg.JoinedAt,
		arg.Emoji,
		arg.MissedHours,
		arg.MissedHoursExcused,
		arg.UserID,
		arg.OrganisationID,
	)
	var i UserStudent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrganisationID,
		&i.LeftAt,
		&i.Grade,
		&i.Birthday,
		&i.Nationality,
		&i.Comments,
		&i.JoinedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Birthplace,
		&i.Emoji,
		&i.MissedHours,
		&i.MissedHoursExcused,
	)
	return i, err
}

const userStudentsAllWithDeleted = `-- name: UserStudentsAllWithDeleted :many
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE organisation_id = $1
`

func (q *Queries) UserStudentsAllWithDeleted(ctx context.Context, organisationID string) ([]UserStudent, error) {
	rows, err := q.db.Query(ctx, userStudentsAllWithDeleted, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStudent
	for rows.Next() {
		var i UserStudent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganisationID,
			&i.LeftAt,
			&i.Grade,
			&i.Birthday,
			&i.Nationality,
			&i.Comments,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Birthplace,
			&i.Emoji,
			&i.MissedHours,
			&i.MissedHoursExcused,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userStudentsFindByID = `-- name: UserStudentsFindByID :many
SELECT id, user_id, organisation_id, left_at, grade, birthday, nationality, comments, joined_at, created_at, deleted_at, birthplace, emoji, missed_hours, missed_hours_excused
FROM user_students
WHERE id = ANY($1::text[])
  AND organisation_id = $2
  AND deleted_at is null
`

type UserStudentsFindByIDParams struct {
	Ids            []string `db:"ids"`
	OrganisationID string   `db:"organisation_id"`
}

func (q *Queries) UserStudentsFindByID(ctx context.Context, arg UserStudentsFindByIDParams) ([]UserStudent, error) {
	rows, err := q.db.Query(ctx, userStudentsFindByID, arg.Ids, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserStudent
	for rows.Next() {
		var i UserStudent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrganisationID,
			&i.LeftAt,
			&i.Grade,
			&i.Birthday,
			&i.Nationality,
			&i.Comments,
			&i.JoinedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Birthplace,
			&i.Emoji,
			&i.MissedHours,
			&i.MissedHoursExcused,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
