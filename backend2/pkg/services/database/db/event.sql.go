// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const eventCreate = `-- name: EventCreate :one
INSERT INTO events (image_file_id, title, body, starts_at, ends_at, organisation_id)
VALUES ($1, $2::text, $3::text, $4, $5, $6)
RETURNING id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
`

type EventCreateParams struct {
	ImageFileID    pgtype.Text `db:"image_file_id"`
	Title          string      `db:"title"`
	Body           string      `db:"body"`
	StartsAt       time.Time   `db:"starts_at"`
	EndsAt         time.Time   `db:"ends_at"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) EventCreate(ctx context.Context, arg EventCreateParams) (Event, error) {
	row := q.db.QueryRow(ctx, eventCreate,
		arg.ImageFileID,
		arg.Title,
		arg.Body,
		arg.StartsAt,
		arg.EndsAt,
		arg.OrganisationID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		&i.Recurrence,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const eventFindById = `-- name: EventFindById :one
SELECT id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
FROM events
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
LIMIT 1
`

type EventFindByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EventFindById(ctx context.Context, arg EventFindByIdParams) (Event, error) {
	row := q.db.QueryRow(ctx, eventFindById, arg.ID, arg.OrganisationID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		&i.Recurrence,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
