// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const entryCreate = `-- name: EntryCreate :one
INSERT INTO entries (date, body, user_id, organisation_id)
VALUES ($1, $2, $3, $4)
RETURNING id, date, body, user_id, created_at, deleted_at, organisation_id
`

type EntryCreateParams struct {
	Date           pgtype.Date `db:"date"`
	Body           string      `db:"body"`
	UserID         string      `db:"user_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) EntryCreate(ctx context.Context, arg EntryCreateParams) (Entry, error) {
	row := q.db.QueryRow(ctx, entryCreate,
		arg.Date,
		arg.Body,
		arg.UserID,
		arg.OrganisationID,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const entryEventCountByUserID = `-- name: EntryEventCountByUserID :one
SELECT COUNT(*)
FROM entry_events ee
         JOIN public.entry_users eu ON ee.entry_id = eu.entry_id
WHERE eu.user_id = $1
  AND ee.organisation_id = $2
  AND ee.deleted_at IS NULL
  AND eu.deleted_at IS NULL
`

type EntryEventCountByUserIDParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryEventCountByUserID(ctx context.Context, arg EntryEventCountByUserIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, entryEventCountByUserID, arg.UserID, arg.OrganisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const entryFindById = `-- name: EntryFindById :one
SELECT id, date, body, user_id, created_at, deleted_at, organisation_id
FROM entries
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
LIMIT 1
`

type EntryFindByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryFindById(ctx context.Context, arg EntryFindByIdParams) (Entry, error) {
	row := q.db.QueryRow(ctx, entryFindById, arg.ID, arg.OrganisationID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const entrySoftDelete = `-- name: EntrySoftDelete :one
UPDATE entries
SET deleted_at = now()
WHERE id = $1
  AND organisation_id = $2
RETURNING id, date, body, user_id, created_at, deleted_at, organisation_id
`

type EntrySoftDeleteParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntrySoftDelete(ctx context.Context, arg EntrySoftDeleteParams) (Entry, error) {
	row := q.db.QueryRow(ctx, entrySoftDelete, arg.ID, arg.OrganisationID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}
