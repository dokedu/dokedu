// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_events.sql

package db

import (
	"context"
)

const eventsFindByEntryEventEntryID = `-- name: EventsFindByEntryEventEntryID :many
SELECT events.id, events.image_file_id, events.organisation_id, events.title, events.body, events.starts_at, events.ends_at, events.recurrence, events.created_at, events.deleted_at
FROM events
         JOIN public.entry_events eu ON events.id = eu.event_id
         JOIN public.entries e ON eu.entry_id = e.id AND e.id = $1
WHERE events.organisation_id = $2
  AND eu.deleted_at IS NULL
  AND e.deleted_at IS NULL
  AND events.deleted_at IS NULL
`

type EventsFindByEntryEventEntryIDParams struct {
	EntryID        string `db:"entry_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EventsFindByEntryEventEntryID(ctx context.Context, arg EventsFindByEntryEventEntryIDParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, eventsFindByEntryEventEntryID, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.OrganisationID,
			&i.Title,
			&i.Body,
			&i.StartsAt,
			&i.EndsAt,
			&i.Recurrence,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
