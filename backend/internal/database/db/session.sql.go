// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
)

const deleteExpiredSession = `-- name: DeleteExpiredSession :exec
UPDATE sessions
SET deleted_at = NOW()
WHERE created_at < NOW() - INTERVAL '12 hours'
`

func (q *Queries) DeleteExpiredSession(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSession)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
UPDATE sessions
SET deleted_at = NOW()
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUserID, userID)
	return err
}

const sessionByToken = `-- name: SessionByToken :one
SELECT id, user_id, token, created_at, deleted_at
FROM sessions
WHERE token = $1
LIMIT 1
`

func (q *Queries) SessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, sessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
