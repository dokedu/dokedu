// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
)

const gLOBAL_CreateSession = `-- name: GLOBAL_CreateSession :one
INSERT INTO sessions (user_id, token)
VALUES ($1, $2)
RETURNING id, user_id, token, created_at, deleted_at
`

type GLOBAL_CreateSessionParams struct {
	UserID string `db:"user_id"`
	Token  string `db:"token"`
}

func (q *Queries) GLOBAL_CreateSession(ctx context.Context, arg GLOBAL_CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, gLOBAL_CreateSession, arg.UserID, arg.Token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const gLOBAL_DeleteExpiredSession = `-- name: GLOBAL_DeleteExpiredSession :exec
UPDATE sessions
SET deleted_at = NOW()
WHERE created_at < NOW() - INTERVAL '12 hours'
`

func (q *Queries) GLOBAL_DeleteExpiredSession(ctx context.Context) error {
	_, err := q.db.Exec(ctx, gLOBAL_DeleteExpiredSession)
	return err
}

const gLOBAL_DeleteSessionsByUserID = `-- name: GLOBAL_DeleteSessionsByUserID :exec
UPDATE sessions
SET deleted_at = NOW()
WHERE user_id = $1
`

func (q *Queries) GLOBAL_DeleteSessionsByUserID(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, gLOBAL_DeleteSessionsByUserID, userID)
	return err
}

const gLOBAL_SessionByToken = `-- name: GLOBAL_SessionByToken :one
SELECT id, user_id, token, created_at, deleted_at
FROM sessions
WHERE token = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GLOBAL_SessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, gLOBAL_SessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const gLOBAL_SessionCountByToken = `-- name: GLOBAL_SessionCountByToken :one
SELECT COUNT(*)
FROM sessions
WHERE token = $1 AND deleted_at IS NULL
`

func (q *Queries) GLOBAL_SessionCountByToken(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRow(ctx, gLOBAL_SessionCountByToken, token)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const gLOBAL_SessionCountByUserId = `-- name: GLOBAL_SessionCountByUserId :one
SELECT COUNT(*)
FROM sessions
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GLOBAL_SessionCountByUserId(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, gLOBAL_SessionCountByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
