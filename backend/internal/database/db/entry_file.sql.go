// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_file.sql

package db

import (
	"context"
)

const createEntryFile = `-- name: CreateEntryFile :one
INSERT INTO entry_files (entry_id, file_id, organisation_id)
VALUES ($1, $2, $3)
ON CONFLICT (entry_id, file_id) DO UPDATE SET deleted_at = NULL
RETURNING id, entry_id, file_id, created_at, deleted_at, organisation_id
`

type CreateEntryFileParams struct {
	EntryID        string `db:"entry_id"`
	FileID         string `db:"file_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) CreateEntryFile(ctx context.Context, arg CreateEntryFileParams) (EntryFile, error) {
	row := q.db.QueryRow(ctx, createEntryFile, arg.EntryID, arg.FileID, arg.OrganisationID)
	var i EntryFile
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.FileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const deleteEntryFile = `-- name: DeleteEntryFile :one
UPDATE entry_files
SET deleted_at = now()
WHERE entry_id = $1 AND file_id = $2 AND organisation_id = $3
RETURNING id, entry_id, file_id, created_at, deleted_at, organisation_id
`

type DeleteEntryFileParams struct {
	EntryID        string `db:"entry_id"`
	FileID         string `db:"file_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteEntryFile(ctx context.Context, arg DeleteEntryFileParams) (EntryFile, error) {
	row := q.db.QueryRow(ctx, deleteEntryFile, arg.EntryID, arg.FileID, arg.OrganisationID)
	var i EntryFile
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.FileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}
