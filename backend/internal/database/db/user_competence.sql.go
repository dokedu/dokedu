// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_competence.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const competenceListByUserCompetenceByEntry = `-- name: CompetenceListByUserCompetenceByEntry :many
SELECT competences.id, name, competences.competence_id, competence_type, competences.organisation_id, grades, color, curriculum_id, competences.created_at, competences.deleted_at, sort_order, competences.created_by, uc.id, level, uc.user_id, entry_id, uc.competence_id, uc.created_at, uc.created_by, uc.deleted_at, uc.organisation_id, e.id, date, body, e.user_id, e.created_at, e.deleted_at, e.organisation_id
FROM competences
         JOIN public.user_competences uc ON competences.id = uc.competence_id
         JOIN public.entries e ON uc.entry_id = e.id
WHERE uc.user_id = $1
  AND uc.organisation_id = $2
  AND uc.entry_id = $3
  AND uc.deleted_at IS NULL
  AND e.deleted_at IS NULL
  AND competences.deleted_at IS NULL
`

type CompetenceListByUserCompetenceByEntryParams struct {
	UserID         string      `db:"user_id"`
	OrganisationID string      `db:"organisation_id"`
	EntryID        pgtype.Text `db:"entry_id"`
}

type CompetenceListByUserCompetenceByEntryRow struct {
	ID               string             `db:"id"`
	Name             string             `db:"name"`
	CompetenceID     pgtype.Text        `db:"competence_id"`
	CompetenceType   CompetenceType     `db:"competence_type"`
	OrganisationID   string             `db:"organisation_id"`
	Grades           []int32            `db:"grades"`
	Color            pgtype.Text        `db:"color"`
	CurriculumID     pgtype.Text        `db:"curriculum_id"`
	CreatedAt        time.Time          `db:"created_at"`
	DeletedAt        pgtype.Timestamptz `db:"deleted_at"`
	SortOrder        pgtype.Int4        `db:"sort_order"`
	CreatedBy        pgtype.Text        `db:"created_by"`
	ID_2             string             `db:"id_2"`
	Level            int32              `db:"level"`
	UserID           string             `db:"user_id"`
	EntryID          pgtype.Text        `db:"entry_id"`
	CompetenceID_2   string             `db:"competence_id_2"`
	CreatedAt_2      time.Time          `db:"created_at_2"`
	CreatedBy_2      pgtype.Text        `db:"created_by_2"`
	DeletedAt_2      pgtype.Timestamptz `db:"deleted_at_2"`
	OrganisationID_2 string             `db:"organisation_id_2"`
	ID_3             string             `db:"id_3"`
	Date             pgtype.Date        `db:"date"`
	Body             string             `db:"body"`
	UserID_2         string             `db:"user_id_2"`
	CreatedAt_3      time.Time          `db:"created_at_3"`
	DeletedAt_3      pgtype.Timestamptz `db:"deleted_at_3"`
	OrganisationID_3 string             `db:"organisation_id_3"`
}

func (q *Queries) CompetenceListByUserCompetenceByEntry(ctx context.Context, arg CompetenceListByUserCompetenceByEntryParams) ([]CompetenceListByUserCompetenceByEntryRow, error) {
	rows, err := q.db.Query(ctx, competenceListByUserCompetenceByEntry, arg.UserID, arg.OrganisationID, arg.EntryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompetenceListByUserCompetenceByEntryRow
	for rows.Next() {
		var i CompetenceListByUserCompetenceByEntryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetenceID,
			&i.CompetenceType,
			&i.OrganisationID,
			&i.Grades,
			&i.Color,
			&i.CurriculumID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.SortOrder,
			&i.CreatedBy,
			&i.ID_2,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID_2,
			&i.CreatedAt_2,
			&i.CreatedBy_2,
			&i.DeletedAt_2,
			&i.OrganisationID_2,
			&i.ID_3,
			&i.Date,
			&i.Body,
			&i.UserID_2,
			&i.CreatedAt_3,
			&i.DeletedAt_3,
			&i.OrganisationID_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUserCompetenceWithoutEntry = `-- name: CreateUserCompetenceWithoutEntry :one
INSERT INTO user_competences (level, user_id, competence_id, created_by, organisation_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
`

type CreateUserCompetenceWithoutEntryParams struct {
	Level          int32       `db:"level"`
	UserID         string      `db:"user_id"`
	CompetenceID   string      `db:"competence_id"`
	CreatedBy      pgtype.Text `db:"created_by"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) CreateUserCompetenceWithoutEntry(ctx context.Context, arg CreateUserCompetenceWithoutEntryParams) (UserCompetence, error) {
	row := q.db.QueryRow(ctx, createUserCompetenceWithoutEntry,
		arg.Level,
		arg.UserID,
		arg.CompetenceID,
		arg.CreatedBy,
		arg.OrganisationID,
	)
	var i UserCompetence
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.UserID,
		&i.EntryID,
		&i.CompetenceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const deleteEntryCompetences = `-- name: DeleteEntryCompetences :many
UPDATE user_competences
SET deleted_at = NOW()
WHERE entry_id = $1
  AND organisation_id = $2
RETURNING id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
`

type DeleteEntryCompetencesParams struct {
	EntryID        pgtype.Text `db:"entry_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) DeleteEntryCompetences(ctx context.Context, arg DeleteEntryCompetencesParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, deleteEntryCompetences, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteUserCompetences = `-- name: DeleteUserCompetences :many
UPDATE user_competences
SET deleted_at = NOW()
WHERE user_id = $1
  AND entry_id = $2
  AND organisation_id = $3
RETURNING id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
`

type DeleteUserCompetencesParams struct {
	UserID         string      `db:"user_id"`
	EntryID        pgtype.Text `db:"entry_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) DeleteUserCompetences(ctx context.Context, arg DeleteUserCompetencesParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, deleteUserCompetences, arg.UserID, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rEPORT_UserCompetenceListByUserId = `-- name: REPORT_UserCompetenceListByUserId :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE user_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
  AND created_at >= $3
  AND created_at <= (DATE $4 + 1)
ORDER BY created_at DESC
`

type REPORT_UserCompetenceListByUserIdParams struct {
	UserID         string    `db:"user_id"`
	OrganisationID string    `db:"organisation_id"`
	StartDate      time.Time `db:"start_date"`
	EndDate        time.Time `db:"+end_date"`
}

func (q *Queries) REPORT_UserCompetenceListByUserId(ctx context.Context, arg REPORT_UserCompetenceListByUserIdParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, rEPORT_UserCompetenceListByUserId,
		arg.UserID,
		arg.OrganisationID,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserCompetenceLevels = `-- name: UpdateUserCompetenceLevels :many
UPDATE user_competences
SET level = $1
WHERE competence_id = $2
  AND entry_id = $3
  AND organisation_id = $4
  AND deleted_at IS NULL
RETURNING id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
`

type UpdateUserCompetenceLevelsParams struct {
	Level          int32       `db:"level"`
	CompetenceID   string      `db:"competence_id"`
	EntryID        pgtype.Text `db:"entry_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) UpdateUserCompetenceLevels(ctx context.Context, arg UpdateUserCompetenceLevelsParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, updateUserCompetenceLevels,
		arg.Level,
		arg.CompetenceID,
		arg.EntryID,
		arg.OrganisationID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserCompetence = `-- name: UpsertUserCompetence :one
INSERT INTO user_competences (entry_id, organisation_id, competence_id, level, user_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (user_id, competence_id, entry_id) DO UPDATE SET deleted_at = NULL AND level = $4
RETURNING id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
`

type UpsertUserCompetenceParams struct {
	EntryID        pgtype.Text `db:"entry_id"`
	OrganisationID string      `db:"organisation_id"`
	CompetenceID   string      `db:"competence_id"`
	Level          int32       `db:"level"`
	UserID         string      `db:"user_id"`
}

func (q *Queries) UpsertUserCompetence(ctx context.Context, arg UpsertUserCompetenceParams) (UserCompetence, error) {
	row := q.db.QueryRow(ctx, upsertUserCompetence,
		arg.EntryID,
		arg.OrganisationID,
		arg.CompetenceID,
		arg.Level,
		arg.UserID,
	)
	var i UserCompetence
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.UserID,
		&i.EntryID,
		&i.CompetenceID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const userCompetenceCountByUserId = `-- name: UserCompetenceCountByUserId :one
SELECT COUNT(*)
FROM user_competences
WHERE user_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
`

type UserCompetenceCountByUserIdParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserCompetenceCountByUserId(ctx context.Context, arg UserCompetenceCountByUserIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, userCompetenceCountByUserId, arg.UserID, arg.OrganisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userCompetenceForCompetenceReport = `-- name: UserCompetenceForCompetenceReport :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE user_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
  AND created_at >= $3
  AND created_at <= (DATE $4 + 1)
ORDER BY created_at DESC
`

type UserCompetenceForCompetenceReportParams struct {
	UserID         string    `db:"user_id"`
	OrganisationID string    `db:"organisation_id"`
	StartDate      time.Time `db:"start_date"`
	EndDate        time.Time `db:"+end_date"`
}

func (q *Queries) UserCompetenceForCompetenceReport(ctx context.Context, arg UserCompetenceForCompetenceReportParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, userCompetenceForCompetenceReport,
		arg.UserID,
		arg.OrganisationID,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userCompetenceList = `-- name: UserCompetenceList :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE organisation_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) UserCompetenceList(ctx context.Context, organisationID string) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, userCompetenceList, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userCompetenceListByEntryAndUser = `-- name: UserCompetenceListByEntryAndUser :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE entry_id = $1
  AND user_id = $2
  AND organisation_id = $3
  AND deleted_at IS NULL
ORDER BY competence_id DESC
`

type UserCompetenceListByEntryAndUserParams struct {
	EntryID        pgtype.Text `db:"entry_id"`
	UserID         string      `db:"user_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) UserCompetenceListByEntryAndUser(ctx context.Context, arg UserCompetenceListByEntryAndUserParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, userCompetenceListByEntryAndUser, arg.EntryID, arg.UserID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userCompetenceListByEntryId = `-- name: UserCompetenceListByEntryId :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE entry_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
ORDER BY competence_id DESC
`

type UserCompetenceListByEntryIdParams struct {
	EntryID        pgtype.Text `db:"entry_id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) UserCompetenceListByEntryId(ctx context.Context, arg UserCompetenceListByEntryIdParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, userCompetenceListByEntryId, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userCompetenceListByUserIdAndCompetenceId = `-- name: UserCompetenceListByUserIdAndCompetenceId :many
SELECT id, level, user_id, entry_id, competence_id, created_at, created_by, deleted_at, organisation_id
FROM user_competences
WHERE user_id = $1
  AND competence_id = $2
  AND organisation_id = $3
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

type UserCompetenceListByUserIdAndCompetenceIdParams struct {
	UserID         string `db:"user_id"`
	CompetenceID   string `db:"competence_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserCompetenceListByUserIdAndCompetenceId(ctx context.Context, arg UserCompetenceListByUserIdAndCompetenceIdParams) ([]UserCompetence, error) {
	rows, err := q.db.Query(ctx, userCompetenceListByUserIdAndCompetenceId, arg.UserID, arg.CompetenceID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserCompetence
	for rows.Next() {
		var i UserCompetence
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.UserID,
			&i.EntryID,
			&i.CompetenceID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
