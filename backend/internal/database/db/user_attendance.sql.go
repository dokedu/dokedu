// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_attendance.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateUserAttendanceForDate = `-- name: UpdateUserAttendanceForDate :many
INSERT INTO user_attendances (user_id, date, state, created_by, organisation_id)
VALUES ((SELECT id FROM users WHERE users.organisation_id = $1), $2, $3, $4,
        $1)
ON CONFLICT (user_id, date)
    DO UPDATE SET state = EXCLUDED.state
RETURNING id, user_id, date, state, created_by, organisation_id, created_at, deleted_at
`

type UpdateUserAttendanceForDateParams struct {
	OrganisationID string              `db:"organisation_id"`
	Date           pgtype.Date         `db:"date"`
	State          UserAttendanceState `db:"state"`
	CreatedBy      string              `db:"created_by"`
}

func (q *Queries) UpdateUserAttendanceForDate(ctx context.Context, arg UpdateUserAttendanceForDateParams) ([]UserAttendance, error) {
	rows, err := q.db.Query(ctx, updateUserAttendanceForDate,
		arg.OrganisationID,
		arg.Date,
		arg.State,
		arg.CreatedBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAttendance
	for rows.Next() {
		var i UserAttendance
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Date,
			&i.State,
			&i.CreatedBy,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAttendanceForUser = `-- name: UpdateUserAttendanceForUser :one
INSERT INTO user_attendances (user_id, date, state, created_by, organisation_id)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (user_id, date)
    DO UPDATE SET state = $3
RETURNING id, user_id, date, state, created_by, organisation_id, created_at, deleted_at
`

type UpdateUserAttendanceForUserParams struct {
	UserID         string              `db:"user_id"`
	Date           pgtype.Date         `db:"date"`
	State          UserAttendanceState `db:"state"`
	CreatedBy      string              `db:"created_by"`
	OrganisationID string              `db:"organisation_id"`
}

func (q *Queries) UpdateUserAttendanceForUser(ctx context.Context, arg UpdateUserAttendanceForUserParams) (UserAttendance, error) {
	row := q.db.QueryRow(ctx, updateUserAttendanceForUser,
		arg.UserID,
		arg.Date,
		arg.State,
		arg.CreatedBy,
		arg.OrganisationID,
	)
	var i UserAttendance
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.State,
		&i.CreatedBy,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
