// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (date, body, user_id, organisation_id)
VALUES (now(), $1, $2, $3)
RETURNING id, date, body, user_id, created_at, deleted_at, organisation_id
`

type CreateEntryParams struct {
	Body           string `db:"body"`
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry, arg.Body, arg.UserID, arg.OrganisationID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :one
UPDATE entries
SET deleted_at = now()
WHERE id = $1 AND organisation_id = $2
RETURNING id, date, body, user_id, created_at, deleted_at, organisation_id
`

type DeleteEntryParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteEntry(ctx context.Context, arg DeleteEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, deleteEntry, arg.ID, arg.OrganisationID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const entryById = `-- name: EntryById :one
SELECT id, date, body, user_id, created_at, deleted_at, organisation_id FROM entries
WHERE id = $1 AND organisation_id = $2 AND deleted_at IS NULL
`

type EntryByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryById(ctx context.Context, arg EntryByIdParams) (Entry, error) {
	row := q.db.QueryRow(ctx, entryById, arg.ID, arg.OrganisationID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Date,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const entryCountByUserId = `-- name: EntryCountByUserId :one
SELECT COUNT(*) FROM entries
WHERE user_id = $1 AND organisation_id = $2 AND deleted_at IS NULL
`

type EntryCountByUserIdParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryCountByUserId(ctx context.Context, arg EntryCountByUserIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, entryCountByUserId, arg.UserID, arg.OrganisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const entryList = `-- name: EntryList :many
SELECT id, date, body, user_id, created_at, deleted_at, organisation_id FROM entries
WHERE organisation_id = $1 AND deleted_at IS NULL
ORDER BY date DESC
`

func (q *Queries) EntryList(ctx context.Context, organisationID string) ([]Entry, error) {
	rows, err := q.db.Query(ctx, entryList, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rEPORT_EntryList = `-- name: REPORT_EntryList :many
SELECT entries.id, entries.date, entries.body, entries.user_id, entries.created_at, entries.deleted_at, entries.organisation_id
FROM entries
JOIN public.entry_users eu ON entries.id = eu.entry_id AND eu.user_id = $1
WHERE date >= $2 AND date <= $3 AND entries.organisation_id = $4 AND deleted_at IS NULL
ORDER BY date DESC
`

type REPORT_EntryListParams struct {
	UserID         string      `db:"user_id"`
	StartDate      pgtype.Date `db:"start_date"`
	EndDate        pgtype.Date `db:"end_date"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) REPORT_EntryList(ctx context.Context, arg REPORT_EntryListParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, rEPORT_EntryList,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.OrganisationID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
