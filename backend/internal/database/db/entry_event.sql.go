// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_event.sql

package db

import (
	"context"
)

const createEntryEvent = `-- name: CreateEntryEvent :one
INSERT INTO entry_events (entry_id, event_id, organisation_id)
VALUES ($1, $2, $3)
ON CONFLICT (entry_id, event_id) DO UPDATE SET deleted_at = NULL
RETURNING id, entry_id, event_id, organisation_id, created_at, deleted_at
`

type CreateEntryEventParams struct {
	EntryID        string `db:"entry_id"`
	EventID        string `db:"event_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) CreateEntryEvent(ctx context.Context, arg CreateEntryEventParams) (EntryEvent, error) {
	row := q.db.QueryRow(ctx, createEntryEvent, arg.EntryID, arg.EventID, arg.OrganisationID)
	var i EntryEvent
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.EventID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEntryEvent = `-- name: DeleteEntryEvent :one
UPDATE entry_events
SET deleted_at = NOW()
WHERE entry_id = $1
  AND event_id = $2
  AND organisation_id = $3
RETURNING id, entry_id, event_id, organisation_id, created_at, deleted_at
`

type DeleteEntryEventParams struct {
	EntryID        string `db:"entry_id"`
	EventID        string `db:"event_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteEntryEvent(ctx context.Context, arg DeleteEntryEventParams) (EntryEvent, error) {
	row := q.db.QueryRow(ctx, deleteEntryEvent, arg.EntryID, arg.EventID, arg.OrganisationID)
	var i EntryEvent
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.EventID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const entryEventCountByUserId = `-- name: EntryEventCountByUserId :one
SELECT COUNT(*)
FROM entry_events
         JOIN public.entry_users eu ON entry_events.entry_id = eu.entry_id
WHERE eu.user_id = $1
  AND entry_events.deleted_at IS NULL
  AND entry_events.organisation_id = $2
`

type EntryEventCountByUserIdParams struct {
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EntryEventCountByUserId(ctx context.Context, arg EntryEventCountByUserIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, entryEventCountByUserId, arg.UserID, arg.OrganisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const entryEventList = `-- name: EntryEventList :many
SELECT id, entry_id, event_id, organisation_id, created_at, deleted_at
FROM entry_events
WHERE organisation_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) EntryEventList(ctx context.Context, organisationID string) ([]EntryEvent, error) {
	rows, err := q.db.Query(ctx, entryEventList, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntryEvent
	for rows.Next() {
		var i EntryEvent
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.EventID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const eventListByEntryEventByEntryId = `-- name: EventListByEntryEventByEntryId :many
SELECT events.id, events.image_file_id, events.organisation_id, events.title, events.body, events.starts_at, events.ends_at, events.recurrence, events.created_at, events.deleted_at
FROM events
         JOIN public.entry_events eu ON events.id = eu.event_id
         JOIN public.entries e ON eu.entry_id = e.id
WHERE eu.deleted_at IS NULL
  AND e.id = $1
  AND events.organisation_id = $2
  AND events.deleted_at IS NULL
ORDER BY events.title
`

type EventListByEntryEventByEntryIdParams struct {
	EntryID        string `db:"entry_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EventListByEntryEventByEntryId(ctx context.Context, arg EventListByEntryEventByEntryIdParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, eventListByEntryEventByEntryId, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.OrganisationID,
			&i.Title,
			&i.Body,
			&i.StartsAt,
			&i.EndsAt,
			&i.Recurrence,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
