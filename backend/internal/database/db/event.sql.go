// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
`

type CreateEventParams struct {
	ImageFileID    pgtype.Text `db:"image_file_id"`
	OrganisationID string      `db:"organisation_id"`
	Title          string      `db:"title"`
	Body           string      `db:"body"`
	StartsAt       time.Time   `db:"starts_at"`
	EndsAt         time.Time   `db:"ends_at"`
	Recurrence     []string    `db:"recurrence"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.ImageFileID,
		arg.OrganisationID,
		arg.Title,
		arg.Body,
		arg.StartsAt,
		arg.EndsAt,
		arg.Recurrence,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		&i.Recurrence,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :one
UPDATE events
SET deleted_at = now()
WHERE id = $1 AND organisation_id = $2
RETURNING id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
`

type DeleteEventParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, deleteEvent, arg.ID, arg.OrganisationID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		&i.Recurrence,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const eventById = `-- name: EventById :one
SELECT id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
FROM events
WHERE id = $1 AND organisation_id = $2 AND deleted_at IS NULL
LIMIT 1
`

type EventByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) EventById(ctx context.Context, arg EventByIdParams) (Event, error) {
	row := q.db.QueryRow(ctx, eventById, arg.ID, arg.OrganisationID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.ImageFileID,
		&i.OrganisationID,
		&i.Title,
		&i.Body,
		&i.StartsAt,
		&i.EndsAt,
		&i.Recurrence,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const eventList = `-- name: EventList :many
SELECT id, image_file_id, organisation_id, title, body, starts_at, ends_at, recurrence, created_at, deleted_at
FROM events
WHERE organisation_id = $1 AND deleted_at IS NULL
`

func (q *Queries) EventList(ctx context.Context, organisationID string) ([]Event, error) {
	rows, err := q.db.Query(ctx, eventList, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.OrganisationID,
			&i.Title,
			&i.Body,
			&i.StartsAt,
			&i.EndsAt,
			&i.Recurrence,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const exportEvents = `-- name: ExportEvents :many
WITH _competences AS (
    -- way 1: directly linked via event event_competences>competences
    SELECT DISTINCT ON (e.id, c.id) e.id AS event_id,
                                    c.id,
                                    c.name,
                                    c.competence_id,
                                    c.grades
    FROM events e
             INNER JOIN event_competences ec ON e.id = ec.event_id
             INNER JOIN competences c ON ec.competence_id = c.id
    WHERE e.organisation_id = $1
      AND e.starts_at >= $2
      AND e.ends_at <= $3
      AND ($4 OR e.deleted_at IS NULL)
      AND c.deleted_at IS NULL
    -- union both ways.
    UNION
    DISTINCT
    -- way 2: indirect via entry_events>events>eac>competences
    SELECT DISTINCT ON (e.id, c.id) e.id, c.id, c.name, c.competence_id, c.grades
    FROM events e
             INNER JOIN entry_events ee ON e.id = ee.event_id
             INNER JOIN entries en ON ee.entry_id = en.id
             INNER JOIN user_competences eac ON en.id = eac.entry_id
             INNER JOIN competences c ON eac.competence_id = c.id
    WHERE e.organisation_id = $1
      AND e.starts_at >= $2
      AND e.ends_at <= $3
      AND ($4 OR e.deleted_at IS NULL)
      AND en.deleted_at IS NULL
      AND eac.deleted_at IS NULL
      AND c.deleted_at IS NULL),

     -- next, for each found competence, fetch the whole competence tree
     _competence_trees AS (SELECT c.event_id,
                                  c.id,
                                  c.name,
                                  c.competence_id,
                                  c.grades,
                                  JSONB_AGG(b) AS competence_tree
                           FROM _competences c,
                                -- use lateral sub query (to get all rows from the function)
                                LATERAL (SELECT get_competence_tree FROM get_competence_tree(c.id)) b
                           -- since the lateral sub query produces multiple rows, we need to group by & use json aggregation
                           GROUP BY c.event_id, c.id, c.name, c.competence_id, c.grades),

     -- for each found competence, fetch the subject (last entry in competence tree).
     -- we then group them by subject, and store the competences using the jsonb_agg
     _subjects AS (SELECT ct.event_id,
                          jsonb_array_element(ct.competence_tree,
                                              JSONB_ARRAY_LENGTH(ct.competence_tree) - 1) ->
                          'id'          AS subject_id,
                          jsonb_array_element(ct.competence_tree,
                                              JSONB_ARRAY_LENGTH(ct.competence_tree) - 1) ->
                          'name'        AS subject_name,
                          JSONB_AGG(ct) AS competences
                   FROM _competence_trees ct
                   GROUP BY ct.event_id, subject_id, subject_name)
SELECT e.id,
       e.title,
       e.body,
       e.starts_at,
       e.ends_at,
       JSONB_AGG(s) FILTER ( WHERE s IS NOT NULL ) AS subjects
FROM events e
         LEFT JOIN _subjects s ON e.id = s.event_id
WHERE e.organisation_id = $1
  AND e.starts_at >= $2
  AND e.ends_at <= $3
  AND ($4 OR e.deleted_at IS NULL)
GROUP BY e.id, e.title
ORDER BY e.ends_at
`

type ExportEventsParams struct {
	OrganisationID string      `db:"_organisation_id"`
	From           time.Time   `db:"_from"`
	To             time.Time   `db:"_to"`
	ShowArchived   interface{} `db:"_show_archived"`
}

type ExportEventsRow struct {
	ID       string          `db:"id"`
	Title    string          `db:"title"`
	Body     string          `db:"body"`
	StartsAt time.Time       `db:"starts_at"`
	EndsAt   time.Time       `db:"ends_at"`
	Subjects json.RawMessage `db:"subjects"`
}

// finally, using all of this info, we can run the main query. select all events again, and group by event so
// all of their found subjects land in a final jsonb_agg.
func (q *Queries) ExportEvents(ctx context.Context, arg ExportEventsParams) ([]ExportEventsRow, error) {
	rows, err := q.db.Query(ctx, exportEvents,
		arg.OrganisationID,
		arg.From,
		arg.To,
		arg.ShowArchived,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExportEventsRow
	for rows.Next() {
		var i ExportEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.StartsAt,
			&i.EndsAt,
			&i.Subjects,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
