// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: entry_user.sql

package db

import (
	"context"
)

const createEntryUser = `-- name: CreateEntryUser :one
INSERT INTO entry_users (entry_id, user_id, organisation_id)
VALUES ($1, $2, $3)
ON CONFLICT (entry_id, user_id) DO UPDATE SET deleted_at = NULL
RETURNING id, entry_id, user_id, created_at, deleted_at, organisation_id
`

type CreateEntryUserParams struct {
	EntryID        string `db:"entry_id"`
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) CreateEntryUser(ctx context.Context, arg CreateEntryUserParams) (EntryUser, error) {
	row := q.db.QueryRow(ctx, createEntryUser, arg.EntryID, arg.UserID, arg.OrganisationID)
	var i EntryUser
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const deleteEntryUser = `-- name: DeleteEntryUser :one
UPDATE entry_users
SET deleted_at = now()
WHERE entry_id = $1 AND user_id = $2 AND organisation_id = $3
RETURNING id, entry_id, user_id, created_at, deleted_at, organisation_id
`

type DeleteEntryUserParams struct {
	EntryID        string `db:"entry_id"`
	UserID         string `db:"user_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteEntryUser(ctx context.Context, arg DeleteEntryUserParams) (EntryUser, error) {
	row := q.db.QueryRow(ctx, deleteEntryUser, arg.EntryID, arg.UserID, arg.OrganisationID)
	var i EntryUser
	err := row.Scan(
		&i.ID,
		&i.EntryID,
		&i.UserID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.OrganisationID,
	)
	return i, err
}

const userListByEntryUserByEntryId = `-- name: UserListByEntryUserByEntryId :many
SELECT users.id, users.role, users.organisation_id, users.first_name, users.last_name, users.email, users.password, users.recovery_token, users.recovery_sent_at, users.avatar_file_id, users.created_at, users.deleted_at, users.language, users.sex
FROM users
JOIN public.entry_users eu ON users.id = eu.user_id
JOIN public.entries e ON eu.entry_id = e.id
WHERE eu.deleted_at IS NULL AND e.id = $1
AND users.organisation_id = $2 AND users.deleted_at IS NULL
ORDER BY users.first_name, users.last_name
`

type UserListByEntryUserByEntryIdParams struct {
	EntryID        string `db:"entry_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserListByEntryUserByEntryId(ctx context.Context, arg UserListByEntryUserByEntryIdParams) ([]User, error) {
	rows, err := q.db.Query(ctx, userListByEntryUserByEntryId, arg.EntryID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.RecoveryToken,
			&i.RecoverySentAt,
			&i.AvatarFileID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Language,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
