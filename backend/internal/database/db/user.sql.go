// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (role, organisation_id, first_name, last_name, email, password, language, sex)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type CreateUserParams struct {
	Role           UserRole     `db:"role"`
	OrganisationID string       `db:"organisation_id"`
	FirstName      string       `db:"first_name"`
	LastName       string       `db:"last_name"`
	Email          pgtype.Text  `db:"email"`
	Password       pgtype.Text  `db:"password"`
	Language       NullUserLang `db:"language"`
	Sex            pgtype.Text  `db:"sex"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Role,
		arg.OrganisationID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Language,
		arg.Sex,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const createUserWithId = `-- name: CreateUserWithId :one
INSERT INTO users (id, role, organisation_id, first_name, last_name, email, password, language, sex)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type CreateUserWithIdParams struct {
	ID             string       `db:"id"`
	Role           UserRole     `db:"role"`
	OrganisationID string       `db:"organisation_id"`
	FirstName      string       `db:"first_name"`
	LastName       string       `db:"last_name"`
	Email          pgtype.Text  `db:"email"`
	Password       pgtype.Text  `db:"password"`
	Language       NullUserLang `db:"language"`
	Sex            pgtype.Text  `db:"sex"`
}

func (q *Queries) CreateUserWithId(ctx context.Context, arg CreateUserWithIdParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithId,
		arg.ID,
		arg.Role,
		arg.OrganisationID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Language,
		arg.Sex,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :one
UPDATE users
SET deleted_at = now()
WHERE id = $1
  AND organisation_id = $2
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type DeleteUserByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteUserById(ctx context.Context, arg DeleteUserByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserById, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_DeleteUserByEmail = `-- name: GLOBAL_DeleteUserByEmail :one
UPDATE users
SET deleted_at = now()
WHERE email = lower($1)
  AND deleted_at IS NULL
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

func (q *Queries) GLOBAL_DeleteUserByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_DeleteUserByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserByEmail = `-- name: GLOBAL_UserByEmail :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GLOBAL_UserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_UserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserById = `-- name: GLOBAL_UserById :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GLOBAL_UserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_UserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserByIdWithDeleted = `-- name: GLOBAL_UserByIdWithDeleted :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = $1
`

func (q *Queries) GLOBAL_UserByIdWithDeleted(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_UserByIdWithDeleted, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserByRecoveryToken = `-- name: GLOBAL_UserByRecoveryToken :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE recovery_token = $1 AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GLOBAL_UserByRecoveryToken(ctx context.Context, recoveryToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_UserByRecoveryToken, recoveryToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserFindBySession = `-- name: GLOBAL_UserFindBySession :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = (SELECT user_id FROM sessions WHERE token = $1 LIMIT 1) AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GLOBAL_UserFindBySession(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, gLOBAL_UserFindBySession, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const gLOBAL_UserList = `-- name: GLOBAL_UserList :many
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
`

func (q *Queries) GLOBAL_UserList(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, gLOBAL_UserList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.RecoveryToken,
			&i.RecoverySentAt,
			&i.AvatarFileID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Language,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const gLOBAL_UsersByIds = `-- name: GLOBAL_UsersByIds :many
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = ANY ($1::text[]) AND deleted_at IS NULL
`

func (q *Queries) GLOBAL_UsersByIds(ctx context.Context, ids []string) ([]User, error) {
	rows, err := q.db.Query(ctx, gLOBAL_UsersByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.RecoveryToken,
			&i.RecoverySentAt,
			&i.AvatarFileID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Language,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET first_name = $1, last_name = $2
WHERE id = $3
  AND organisation_id = $4
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type UpdateUserParams struct {
	FirstName      string `db:"first_name"`
	LastName       string `db:"last_name"`
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.ID,
		arg.OrganisationID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const updateUserLanguage = `-- name: UpdateUserLanguage :one
UPDATE users
SET language = $1
WHERE id = $2
  AND organisation_id = $3
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type UpdateUserLanguageParams struct {
	Language       NullUserLang `db:"language"`
	ID             string       `db:"id"`
	OrganisationID string       `db:"organisation_id"`
}

func (q *Queries) UpdateUserLanguage(ctx context.Context, arg UpdateUserLanguageParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserLanguage, arg.Language, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $1
WHERE id = $2
  AND organisation_id = $3
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type UpdateUserPasswordParams struct {
	Password       pgtype.Text `db:"password"`
	ID             string      `db:"id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Password, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const updateUserRecoveryToken = `-- name: UpdateUserRecoveryToken :one
UPDATE users
SET recovery_token = $1
WHERE id = $2
  AND organisation_id = $3
RETURNING id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
`

type UpdateUserRecoveryTokenParams struct {
	RecoveryToken  pgtype.Text `db:"recovery_token"`
	ID             string      `db:"id"`
	OrganisationID string      `db:"organisation_id"`
}

func (q *Queries) UpdateUserRecoveryToken(ctx context.Context, arg UpdateUserRecoveryTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserRecoveryToken, arg.RecoveryToken, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const userById = `-- name: UserById :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = $1
  AND organisation_id = $2
`

type UserByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserById(ctx context.Context, arg UserByIdParams) (User, error) {
	row := q.db.QueryRow(ctx, userById, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const userByIdWithDeleted = `-- name: UserByIdWithDeleted :one
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE id = $1
  AND organisation_id = $2
LIMIT 1
`

type UserByIdWithDeletedParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UserByIdWithDeleted(ctx context.Context, arg UserByIdWithDeletedParams) (User, error) {
	row := q.db.QueryRow(ctx, userByIdWithDeleted, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.RecoveryToken,
		&i.RecoverySentAt,
		&i.AvatarFileID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Language,
		&i.Sex,
	)
	return i, err
}

const userList = `-- name: UserList :many
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE organisation_id = $1 AND deleted_at IS NULL
`

func (q *Queries) UserList(ctx context.Context, organisationID string) ([]User, error) {
	rows, err := q.db.Query(ctx, userList, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.RecoveryToken,
			&i.RecoverySentAt,
			&i.AvatarFileID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Language,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListByRole = `-- name: UserListByRole :many
SELECT id, role, organisation_id, first_name, last_name, email, password, recovery_token, recovery_sent_at, avatar_file_id, created_at, deleted_at, language, sex
FROM users
WHERE role = $1
  AND organisation_id = $2 AND deleted_at IS NULL
`

type UserListByRoleParams struct {
	Role           UserRole `db:"role"`
	OrganisationID string   `db:"organisation_id"`
}

func (q *Queries) UserListByRole(ctx context.Context, arg UserListByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, userListByRole, arg.Role, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.RecoveryToken,
			&i.RecoverySentAt,
			&i.AvatarFileID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Language,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userListCount = `-- name: UserListCount :one
SELECT COUNT(*)
FROM users
WHERE organisation_id = $1 AND deleted_at IS NULL
`

func (q *Queries) UserListCount(ctx context.Context, organisationID string) (int64, error) {
	row := q.db.QueryRow(ctx, userListCount, organisationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
