// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: report.sql

package db

import (
	"context"
)

const gLOBAL_ReportById = `-- name: GLOBAL_ReportById :one
SELECT id, status, format, kind, "from", "to", meta, filter_tags, file_id, user_id, student_user_id, organisation_id, created_at, deleted_at
FROM reports
WHERE id = $1
LIMIT 1
`

func (q *Queries) GLOBAL_ReportById(ctx context.Context, id string) (Report, error) {
	row := q.db.QueryRow(ctx, gLOBAL_ReportById, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Format,
		&i.Kind,
		&i.From,
		&i.To,
		&i.Meta,
		&i.FilterTags,
		&i.FileID,
		&i.UserID,
		&i.StudentUserID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const gLOBAL_ReportsByStatus = `-- name: GLOBAL_ReportsByStatus :many
SELECT id, status, format, kind, "from", "to", meta, filter_tags, file_id, user_id, student_user_id, organisation_id, created_at, deleted_at
FROM reports
WHERE status = $1
`

func (q *Queries) GLOBAL_ReportsByStatus(ctx context.Context, status ReportStatus) ([]Report, error) {
	rows, err := q.db.Query(ctx, gLOBAL_ReportsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Format,
			&i.Kind,
			&i.From,
			&i.To,
			&i.Meta,
			&i.FilterTags,
			&i.FileID,
			&i.UserID,
			&i.StudentUserID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const gLOBAL_UpdateReportStatus = `-- name: GLOBAL_UpdateReportStatus :exec
UPDATE reports
SET status = $1
WHERE id = $2
`

type GLOBAL_UpdateReportStatusParams struct {
	Status ReportStatus `db:"status"`
	ID     string       `db:"id"`
}

func (q *Queries) GLOBAL_UpdateReportStatus(ctx context.Context, arg GLOBAL_UpdateReportStatusParams) error {
	_, err := q.db.Exec(ctx, gLOBAL_UpdateReportStatus, arg.Status, arg.ID)
	return err
}
