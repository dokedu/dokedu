package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/dokedu/dokedu/backend/internal/database/db"
	"github.com/dokedu/dokedu/backend/internal/dataloaders"
	"github.com/dokedu/dokedu/backend/internal/graph/model"
	"github.com/dokedu/dokedu/backend/internal/helper"
	"github.com/dokedu/dokedu/backend/internal/middleware"
	meili "github.com/dokedu/dokedu/backend/internal/modules/meilisearch"
	meilisearch "github.com/meilisearch/meilisearch-go"
	"github.com/uptrace/bun"
)

// Type is the resolver for the type field.
func (r *competenceResolver) Type(ctx context.Context, obj *db.Competence) (db.CompetenceType, error) {
	return obj.CompetenceType, nil
}

// Color is the resolver for the color field.
func (r *competenceResolver) Color(ctx context.Context, obj *db.Competence) (string, error) {
	if obj.Color.Valid {
		return obj.Color.String, nil
	}

	return "", nil
}

// Parents is the resolver for the parents field.
func (r *competenceResolver) Parents(ctx context.Context, obj *db.Competence) ([]*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	return dataloaders.GetCompetenceParents(ctx, obj.ID, currentUser)
}

// SortOrder is the resolver for the sortOrder field.
func (r *competenceResolver) SortOrder(ctx context.Context, obj *db.Competence) (int, error) {
	panic(fmt.Errorf("not implemented: SortOrder - sortOrder"))
}

// Competences is the resolver for the competences field.
func (r *competenceResolver) Competences(ctx context.Context, obj *db.Competence, search *string, sort *model.CompetenceSort) ([]*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var competences []*db.Competence
	query := r.DB.
		NewSelect().
		Model(&competences).
		Where("competence_id = ?", obj.ID).
		Where("organisation_id = ?", currentUser.OrganisationID)

	if sort != nil {
		switch sort.Field {
		case model.CompetenceSortFieldSortOrder:
			query.Order("sort_order ASC")
			query.Order("name ASC")
		case model.CompetenceSortFieldName:
			query.Order("name ASC")
		case model.CompetenceSortFieldCreatedAt:
			query.Order("created_at ASC")
		}
	} else {
		//query.Order("name ASC")
	}

	if search != nil && *search != "" {
		query.Where("name ILIKE ?", fmt.Sprintf("%%%s%%", *search))
	}

	err = query.Scan(ctx)
	if err != nil {
		return nil, err
	}

	return competences, nil
}

// UserCompetences is the resolver for the userCompetences field.
func (r *competenceResolver) UserCompetences(ctx context.Context, obj *db.Competence, userID *string) ([]*db.UserCompetence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	if userID == nil {
		return []*db.UserCompetence{}, nil
	}

	var userCompetences []*db.UserCompetence
	err = r.DB.NewSelect().
		Model(&userCompetences).
		Where("competence_id = ?", obj.ID).
		Where("user_id = ?", *userID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Order("created_at DESC").
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	return userCompetences, nil
}

// Tendency is the resolver for the tendency field.
func (r *competenceResolver) Tendency(ctx context.Context, obj *db.Competence, userID string) (*model.CompetenceTendency, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	if obj.CompetenceType == db.CompetenceTypeCompetence {
		return nil, nil
	}

	var user db.User
	err = r.DB.NewSelect().Model(&user).Where("id = ?", userID).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	if currentUser.OrganisationID != user.OrganisationID {
		return nil, errors.New("user does not belong to the same organisation")
	}

	var tendency model.CompetenceTendency

	childCountQuery := `WITH RECURSIVE child_competences AS ( SELECT id, competence_type FROM competences WHERE competence_id = ? UNION ALL SELECT c.id, c.competence_type FROM competences c INNER JOIN child_competences cc ON c.competence_id = cc.id ) SELECT COUNT(id) FROM child_competences WHERE competence_type = 'competence'`
	err = r.DB.NewRaw(childCountQuery, obj.ID).Scan(ctx, &tendency.CountChildCompetences)

	learnedCountQuery := `SELECT COUNT(DISTINCT user_competences.competence_id) FROM user_competences WHERE organisation_id = ? AND user_id = ? AND competence_id IN ( WITH RECURSIVE child_competences AS ( SELECT id, competence_type FROM competences WHERE competence_id = ? UNION ALL SELECT c.id, c.competence_type FROM competences c INNER JOIN child_competences cc ON c.competence_id = cc.id ) SELECT id FROM child_competences WHERE competence_type = 'competence' )`
	err = r.DB.NewRaw(learnedCountQuery, currentUser.OrganisationID, userID, obj.ID).Scan(ctx, &tendency.CountLearnedCompetences)

	tendency.Tendency = float64(tendency.CountLearnedCompetences) / float64(tendency.CountChildCompetences)

	return &tendency, nil
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.CreateStudentInput) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	// Create user first
	user := db.User{
		OrganisationID: currentUser.OrganisationID,
		FirstName:      input.FirstName,
		LastName:       input.LastName,
		Role:           "student",
		Email:          sql.NullString{},
	}

	// Insert and get the new id
	err = r.DB.NewInsert().Model(&user).Scan(ctx)
	if err != nil {
		return nil, nil
	}

	// Create user_student struct
	student := db.UserStudent{
		UserID:         user.ID,
		OrganisationID: currentUser.OrganisationID,
		Grade:          int32(input.Grade),
	}

	if input.Birthday != nil {
		student.Birthday = bun.NullTime{Time: *input.Birthday}
	}
	if input.JoinedAt != nil {
		student.JoinedAt = bun.NullTime{Time: *input.JoinedAt}
	}
	if input.LeftAt != nil {
		student.LeftAt = bun.NullTime{Time: *input.LeftAt}
	}
	if input.Emoji != nil {
		student.Emoji = sql.NullString{String: *input.Emoji, Valid: true}
	}

	// Insert the user_student
	err = r.DB.NewInsert().Model(&student).Scan(ctx)
	if err != nil {
		return nil, nil
	}

	return &user, nil
}

// CreateUserCompetence is the resolver for the createUserCompetence field.
func (r *mutationResolver) CreateUserCompetence(ctx context.Context, input model.CreateUserCompetenceInput) (*db.UserCompetence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	if input.UserID == "" {
		return nil, errors.New("user id is required")
	}
	if input.CompetenceID == "" {
		return nil, errors.New("competence id is required")
	}

	userCompetence := db.UserCompetence{
		UserID:         input.UserID,
		Level:          input.Level,
		CreatedBy:      sql.NullString{String: currentUser.ID, Valid: true},
		CompetenceID:   input.CompetenceID,
		OrganisationID: currentUser.OrganisationID,
	}

	err = r.DB.NewInsert().Model(&userCompetence).Returning("*").Scan(ctx)

	if err != nil {
		return nil, err
	}

	return &userCompetence, nil
}

// ArchiveUserCompetence is the resolver for the archiveUserCompetence field.
func (r *mutationResolver) ArchiveUserCompetence(ctx context.Context, id string) (*db.UserCompetence, error) {
	panic(fmt.Errorf("not implemented: ArchiveUserCompetence - archiveUserCompetence"))
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.CreateTagInput) (*db.Tag, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	// Check if tag with the same name already exists
	count, err := r.DB.NewSelect().Model(&db.Tag{}).Where("organisation_id = ?", currentUser.OrganisationID).Where("name = ?", input.Name).WhereAllWithDeleted().Count(ctx)
	if err != nil {
		return nil, err
	}

	if count > 0 {
		return nil, errors.New("Tag with the same name already exists")
	}

	// check if color is set
	color := input.Color
	if color == "" {
		color = "blue"
	}

	newTag := db.Tag{
		OrganisationID: currentUser.OrganisationID,
		Name:           input.Name,
		Color:          sql.NullString{String: color, Valid: true},
	}

	err = r.DB.NewInsert().Model(&newTag).Returning("*").Scan(ctx)

	if err != nil {
		return nil, err
	}

	return &newTag, nil
}

// ArchiveTag is the resolver for the archiveTag field.
func (r *mutationResolver) ArchiveTag(ctx context.Context, id string) (*db.Tag, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	// set deleted_at field to the current time
	tag := db.Tag{
		ID:             id,
		OrganisationID: currentUser.OrganisationID,
		DeletedAt: bun.NullTime{
			Time: time.Now(),
		},
	}
	_, err = r.DB.NewUpdate().Model(&tag).Column("deleted_at").Where("id = ?", id).Where("organisation_id = ?", currentUser.OrganisationID).WhereAllWithDeleted().Returning("*").Exec(ctx)

	if err != nil {
		return nil, err
	}

	return &tag, nil
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, id string, input model.CreateTagInput) (*db.Tag, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var tag db.Tag
	tag.ID = id
	err = r.DB.NewSelect().
		Model(&tag).
		Where("organisation_id = ?", currentUser.OrganisationID).
		WherePK().
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	// update the tag
	tag.Name = input.Name

	color := input.Color
	if color == "" {
		color = "blue"
	}

	tag.Color = sql.NullString{String: color, Valid: true}
	_, err = r.DB.NewUpdate().Model(&tag).WherePK().Exec(ctx)

	if err != nil {
		return nil, err
	}

	return &tag, nil
}

// UpdateCompetence is the resolver for the updateCompetence field.
func (r *mutationResolver) UpdateCompetence(ctx context.Context, input model.UpdateCompetenceInput) (*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var competence db.Competence
	competence.ID = input.ID
	err = r.DB.NewSelect().
		Model(&competence).
		Where("organisation_id = ?", currentUser.OrganisationID).
		WherePK().
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	if input.Color != nil {
		competence.Color = sql.NullString{String: *input.Color, Valid: true}
	}

	err = r.DB.NewUpdate().Model(&competence).WherePK().Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &competence, nil
}

// UpdateCompetenceSorting is the resolver for the updateCompetenceSorting field.
func (r *mutationResolver) UpdateCompetenceSorting(ctx context.Context, input model.UpdateCompetenceSortingInput) ([]*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	ids := make([]string, len(input.Competences))
	for i, id := range input.Competences {
		ids[i] = id.ID
	}

	var competences []*db.Competence
	err = r.DB.NewSelect().Model(&competences).Where("id IN (?)", bun.In(ids)).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	// if length of competences is not equal to length of input, then some competences were not found
	if len(competences) != len(input.Competences) {
		return nil, fmt.Errorf("some competences were not found %v, %v", len(competences), len(input.Competences))
	}

	// create a map of competences for easy lookup
	competenceMap := make(map[string]*db.Competence)
	for _, competence := range competences {
		competenceMap[competence.ID] = competence
	}

	// update the sorting
	for i, id := range ids {
		competenceMap[id].SortOrder = i
	}

	for _, competence := range competences {
		sortOrder := competenceMap[competence.ID].SortOrder
		_, err = r.DB.NewUpdate().Model(competence).WherePK().Set("sort_order = ?", sortOrder).Where("organisation_id = ?", currentUser.OrganisationID).Exec(ctx)
		if err != nil {
			return nil, err
		}
	}

	return competences, nil
}

// CreateCompetence is the resolver for the createCompetence field.
func (r *mutationResolver) CreateCompetence(ctx context.Context, input model.CreateCompetenceInput) (*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var subject db.Competence
	err = r.DB.NewSelect().Model(&subject).
		Where("id = ?", input.ParentID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, errors.New("subject not found")
	}

	// grades with default array from 1-10
	defaultGrades := make([]int, 10)
	for i := 0; i < 10; i++ {
		defaultGrades[i] = i + 1
	}

	competence := db.Competence{
		CompetenceType: db.CompetenceTypeCompetence,
		CompetenceID:   sql.NullString{String: subject.ID, Valid: true},
		Name:           input.Name,
		Grades:         defaultGrades,
		OrganisationID: currentUser.OrganisationID,
		CreatedBy:      sql.NullString{String: currentUser.ID, Valid: true},
	}

	err = r.DB.NewInsert().Model(&competence).Returning("*").Scan(ctx)
	if err != nil {
		return nil, errors.New("creating competence failed")
	}

	return &competence, nil
}

// Competence is the resolver for the competence field.
func (r *queryResolver) Competence(ctx context.Context, id string) (*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var competence db.Competence
	err = r.DB.NewSelect().Model(&competence).Where("id = ?", id).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &competence, nil
}

// Competences is the resolver for the competences field.
func (r *queryResolver) Competences(ctx context.Context, limit *int, offset *int, filter *model.CompetenceFilterInput, search *string, sort *model.CompetenceSort) (*model.CompetenceConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var ids []string

	if search != nil && len(*search) > 0 {
		indexName := r.Meili.GetCompetenceIndex(currentUser.OrganisationID)
		filterStr := ""

		if filter != nil {
			if filter.Parents != nil && len(filter.Parents) > 0 {
				var parents []string
				for _, parent := range filter.Parents {
					parents = append(parents, *parent)

				}
				filterStr += "parents IN [" + strings.Join(parents, ", ") + "]"
			}

			// TODO: code repeats, find more elegant solution
			if filter.Type != nil && len(filter.Type) > 0 {
				var types []string
				for _, _type := range filter.Type {
					types = append(types, string(*_type))

				}
				filterStr += "competence_type IN [" + strings.Join(types, ", ") + "]"
			}
		}

		searchRequest := meilisearch.SearchRequest{
			Limit: int64(pageLimit),
		}

		if filterStr != "" {
			searchRequest.Filter = filterStr
		}

		term := *search

		response, err := r.Meili.Client.Index(indexName).SearchRaw(term, &searchRequest)
		if err != nil {
			return nil, err
		}

		var results meili.SearchResponseCompetence
		err = json.Unmarshal(*response, &results)
		if err != nil {
			return nil, err
		}

		for _, hit := range results.Hits {
			ids = append(ids, hit.ID)
		}

		fmt.Println(ids)
	}

	var competences []*db.Competence
	query := r.DB.NewSelect().
		Model(&competences).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Limit(pageLimit).
		Offset(pageOffset)

	if len(ids) > 0 {
		query.Where("id IN (?)", bun.In(ids))
	} else {
		if sort != nil {
			query.Order("competence_type")
			switch sort.Field {
			case model.CompetenceSortFieldSortOrder:
				query.Order("sort_order ASC")
			case model.CompetenceSortFieldName:
				query.Order("name ASC")
			case model.CompetenceSortFieldCreatedAt:
				query.Order("created_at ASC")
			}
		} else {
			query.Order("competence_type")
			query.Order("name ASC")
		}

		if filter != nil {
			if filter.Type != nil {
				if len(filter.Type) == 1 {
					query.Where("competence_type = ?", filter.Type[0])
				} else {
					query.Where("competence_type IN (?)", bun.In(filter.Type))
				}
			}

			if filter.Parents != nil {
				if len(filter.Parents) == 1 {
					query.Where("competence_id = ?", filter.Parents[0])
				} else {
					query.Where("competence_id IN (?)", bun.In(filter.Parents))
				}
			}
		}
	}

	count, err := query.ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	page, err := helper.CreatePageInfo(pageOffset, pageLimit, count)
	if err != nil {
		return nil, err
	}

	page.CurrentPage = pageOffset / pageLimit
	return &model.CompetenceConnection{
		Edges:      competences,
		PageInfo:   page,
		TotalCount: count,
	}, nil
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*db.Tag, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var tag db.Tag
	err = r.DB.NewSelect().Model(&tag).Where("id = ?", id).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &tag, nil
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, limit *int, offset *int, search *string) (*model.TagConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var tags []*db.Tag
	query := r.DB.NewSelect().
		Model(&tags).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Limit(pageLimit).
		Offset(pageOffset).
		Order("name")

	if search != nil && *search != "" {
		query.Where("name ILIKE ?", "%"+*search+"%")
	}

	count, err := query.ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	// Get the pageInfo
	page, err := helper.CreatePageInfo(pageOffset, pageLimit, count)
	if err != nil {
		return nil, err
	}

	return &model.TagConnection{
		Edges:      tags,
		PageInfo:   page,
		TotalCount: count,
	}, nil
}

// UserStudents is the resolver for the userStudents field.
func (r *queryResolver) UserStudents(ctx context.Context, limit *int, offset *int) (*model.UserStudentConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var userStudents []*db.UserStudent
	count, err := r.DB.NewSelect().Model(&userStudents).Where("organisation_id = ?", currentUser.OrganisationID).Limit(pageLimit).Offset(pageOffset).ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	page, err := helper.CreatePageInfo(pageOffset, pageLimit, count)
	if err != nil {
		return nil, err
	}

	return &model.UserStudentConnection{
		Edges:      userStudents,
		PageInfo:   page,
		TotalCount: count,
	}, nil
}

// UserStudent is the resolver for the userStudent field.
func (r *queryResolver) UserStudent(ctx context.Context, id string) (*db.UserStudent, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var userStudent db.UserStudent
	err = r.DB.NewSelect().Model(&userStudent).Where("id = ?", id).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &userStudent, nil
}

// Color is the resolver for the color field.
func (r *tagResolver) Color(ctx context.Context, obj *db.Tag) (string, error) {
	if obj.Color.Valid {
		return obj.Color.String, nil
	}

	return "", nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *tagResolver) DeletedAt(ctx context.Context, obj *db.Tag) (*time.Time, error) {
	if obj.DeletedAt.IsZero() {
		return &obj.DeletedAt.Time, nil
	}

	return nil, nil
}

// Competence is the resolver for the competence field.
func (r *userCompetenceResolver) Competence(ctx context.Context, obj *db.UserCompetence) (*db.Competence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var competence db.Competence
	err = r.DB.NewSelect().Model(&competence).Where("id = ?", obj.CompetenceID).Where("organisation_id = ?", currentUser.OrganisationID).WhereAllWithDeleted().Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &competence, nil
}

// Entry is the resolver for the entry field.
func (r *userCompetenceResolver) Entry(ctx context.Context, obj *db.UserCompetence) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	if sql.NullString(obj.EntryID).String == "" {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.NewSelect().Model(&entry).Where("id = ?", obj.EntryID).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}

	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// User is the resolver for the user field.
func (r *userCompetenceResolver) User(ctx context.Context, obj *db.UserCompetence) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	return dataloaders.GetUser(ctx, obj.UserID, currentUser)
}

// CreatedBy is the resolver for the createdBy field.
func (r *userCompetenceResolver) CreatedBy(ctx context.Context, obj *db.UserCompetence) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var user db.User
	err = r.DB.NewSelect().Model(&user).Where("id = ?", obj.CreatedBy).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// LeftAt is the resolver for the leftAt field.
func (r *userStudentResolver) LeftAt(ctx context.Context, obj *db.UserStudent) (*time.Time, error) {
	if !obj.LeftAt.IsZero() {
		return &obj.LeftAt.Time, nil
	}

	return nil, nil
}

// Birthday is the resolver for the birthday field.
func (r *userStudentResolver) Birthday(ctx context.Context, obj *db.UserStudent) (*time.Time, error) {
	if !obj.Birthday.IsZero() {
		return &obj.Birthday.Time, nil
	}
	return nil, nil
}

// Nationality is the resolver for the nationality field.
func (r *userStudentResolver) Nationality(ctx context.Context, obj *db.UserStudent) (*string, error) {
	panic(fmt.Errorf("not implemented: Nationality - nationality"))
}

// Comments is the resolver for the comments field.
func (r *userStudentResolver) Comments(ctx context.Context, obj *db.UserStudent) (*string, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// JoinedAt is the resolver for the joinedAt field.
func (r *userStudentResolver) JoinedAt(ctx context.Context, obj *db.UserStudent) (*time.Time, error) {
	if !obj.JoinedAt.IsZero() {
		return &obj.JoinedAt.Time, nil
	}

	return nil, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *userStudentResolver) DeletedAt(ctx context.Context, obj *db.UserStudent) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// EntriesCount is the resolver for the entriesCount field.
func (r *userStudentResolver) EntriesCount(ctx context.Context, obj *db.UserStudent) (int, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return 0, nil
	}

	count, err := r.DB.NewSelect().Model(&db.EntryUser{}).Where("user_id = ?", obj.UserID).Where("organisation_id = ?", currentUser.OrganisationID).Count(ctx)

	if err != nil {
		return 0, err
	}

	return count, nil
}

// CompetencesCount is the resolver for the competencesCount field.
func (r *userStudentResolver) CompetencesCount(ctx context.Context, obj *db.UserStudent) (int, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return 0, nil
	}

	count, err := r.DB.NewSelect().Model(&db.UserCompetence{}).Where("user_id = ?", obj.UserID).Where("organisation_id = ?", currentUser.OrganisationID).Count(ctx)

	if err != nil {
		return 0, err
	}

	return count, nil
}

// EventsCount is the resolver for the eventsCount field.
func (r *userStudentResolver) EventsCount(ctx context.Context, obj *db.UserStudent) (int, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return 0, nil
	}

	count, err := r.DB.NewSelect().
		Model(&db.EntryEvent{}).
		Join("JOIN entry_users ON entry_users.entry_id = entry_event.entry_id").
		Where("entry_users.user_id = ?", obj.UserID).
		Where("entry_event.organisation_id = ?", currentUser.OrganisationID).
		Count(ctx)

	if err != nil {
		return 0, err
	}

	return count, nil
}

// Emoji is the resolver for the emoji field.
func (r *userStudentResolver) Emoji(ctx context.Context, obj *db.UserStudent) (*string, error) {
	_, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	if obj.Emoji.Valid {
		return &obj.Emoji.String, nil
	}
	return nil, nil
}

// User is the resolver for the user field.
func (r *userStudentResolver) User(ctx context.Context, obj *db.UserStudent) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	return dataloaders.GetUser(ctx, obj.UserID, currentUser)
}

// MissedHours is the resolver for the missedHours field.
func (r *userStudentResolver) MissedHours(ctx context.Context, obj *db.UserStudent) (int, error) {
	panic(fmt.Errorf("not implemented: MissedHours - missedHours"))
}

// MissedHoursExcused is the resolver for the missedHoursExcused field.
func (r *userStudentResolver) MissedHoursExcused(ctx context.Context, obj *db.UserStudent) (int, error) {
	panic(fmt.Errorf("not implemented: MissedHoursExcused - missedHoursExcused"))
}

// Competence returns CompetenceResolver implementation.
func (r *Resolver) Competence() CompetenceResolver { return &competenceResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Tag returns TagResolver implementation.
func (r *Resolver) Tag() TagResolver { return &tagResolver{r} }

// UserCompetence returns UserCompetenceResolver implementation.
func (r *Resolver) UserCompetence() UserCompetenceResolver { return &userCompetenceResolver{r} }

// UserStudent returns UserStudentResolver implementation.
func (r *Resolver) UserStudent() UserStudentResolver { return &userStudentResolver{r} }

type competenceResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }
type userCompetenceResolver struct{ *Resolver }
type userStudentResolver struct{ *Resolver }
