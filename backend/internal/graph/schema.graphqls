# GraphQL schema github.com/dokedu/dokedu/backend
#
# https://gqlgen.com/getting-started/

scalar Time

enum CompetenceType {
    subject
    group
    competence
}

type Competence {
    id: ID!
    name: String!
    type: CompetenceType!
    grades: [Int!]!
    color: String!
    createdAt: Time!
    parents: [Competence!]!
    sortOrder: Int!
    competences(search: String, sort: CompetenceSort): [Competence]!
    userCompetences(userId: ID): [UserCompetence]!
    tendency(userId: ID!): CompetenceTendency
}

type CompetenceTendency {
    countChildCompetences: Int!
    countLearnedCompetences: Int!
    tendency: Float! # -1.0 to 1.0
}

type UserCompetence {
    id: ID!
    level: Int!
    competence: Competence!
    entry: Entry
    user: User!
    createdBy: User
    createdAt: Time!
    # TODO: deletedAt: Time
}

type UserCompetenceConnection {
    edges: [UserCompetence]
    pageInfo: PageInfo!
    totalCount: Int!
}

type Tag {
    id: ID!
    name: String!
    color: String!
    createdAt: Time!
    deletedAt: Time
}


type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    currentPage: Int!
}


type CompetenceConnection {
    edges: [Competence]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserStudent {
    id: ID!
    leftAt: Time
    grade: Int!
    birthday: Time
    nationality: String
    comments: String
    joinedAt: Time
    createdAt: Time!
    deletedAt: Time
    entriesCount: Int!
    competencesCount: Int!
    eventsCount: Int!
    emoji: String
    user: User!
    missedHours: Int!
    missedHoursExcused: Int!
}

type UserStudentConnection {
    edges: [UserStudent]
    pageInfo: PageInfo!
    totalCount: Int!
}

type TagConnection {
    edges: [Tag]
    pageInfo: PageInfo!
    totalCount: Int!
}



input CompetenceFilterInput {
    type: [CompetenceType]
    parents: [ID]
    userId: ID
}


input UserCompetenceFilterInput {
    userID: ID
    competenceID: ID
}

enum CompetenceSortField {
    created_at
    name
    sort_order
}

enum SortDirection {
    asc
    desc
}

input CompetenceSort {
    field: CompetenceSortField!
    order: SortDirection!
}

type Query

type Mutation

extend type Query {
    competence(id: ID!): Competence!
    competences(limit: Int, offset: Int, filter: CompetenceFilterInput, search: String, sort: CompetenceSort): CompetenceConnection!

    tag(id: ID!): Tag!
    tags(limit: Int, offset: Int, search: String): TagConnection!

    userStudents(limit: Int, offset: Int): UserStudentConnection!
    userStudent(id: ID!): UserStudent!
}


input CreateStudentInput {
    firstName: String!
    lastName: String!
    grade: Int!
    birthday: Time
    leftAt: Time
    joinedAt: Time
    emoji: String
}



input CreateTagInput {
    name: String!
    color: String!
}

input UpdateCompetenceInput {
    id: ID!
    color: String
}

input SortCompetenceInput {
    id: ID!
    sortOrder: Int!
}

input UpdateCompetenceSortingInput {
    competences: [SortCompetenceInput!]!
}

input CreateCompetenceInput {
    name: String!
    parentId: ID!
}

extend type Mutation {
    createStudent(input: CreateStudentInput!): User!

    createUserCompetence(input: CreateUserCompetenceInput!): UserCompetence!
    archiveUserCompetence(id: ID!): UserCompetence!

    createTag(input: CreateTagInput!): Tag!
    archiveTag(id: ID!): Tag!
    updateTag(id: ID!, input: CreateTagInput!): Tag!



    updateCompetence(input: UpdateCompetenceInput!): Competence!

    updateCompetenceSorting(input: UpdateCompetenceSortingInput!): [Competence]!

    createCompetence(input: CreateCompetenceInput!): Competence!
}

