enum ChatType {
    PRIVATE
    GROUP
    CHANNEL
    AI
}

type Chat {
    id: ID!
    name: String
    type: ChatType!
    users: [User!]!

    userCount: Int!
    unreadMessageCount: Int!

    messages: [ChatMessage!]!
    lastMessage: ChatMessage

    createdAt: Time!
    deletedAt: Time
    deleted: Boolean!
}

type ChatUser {
    id: ID!
    chat: Chat!
    user: User!
}

type ChatMessage {
    id: ID!
    chat: Chat!
    user: User!
    message: String!

    isEdited: Boolean!
    isSeen: Boolean!

    createdAt: Time!
}

type ChatConnection {
    edges: [Chat]
    pageInfo: PageInfo!
    totalCount: Int!
}

extend type Query {
    chat(id: ID!): Chat!
    chats(limit: Int, offset: Int): ChatConnection!
}

input CreateChatInput {
    name: String
}

input DeleteChatInput {
    id: ID!
}

input AddUserToChatInput {
    chatId: ID!
    userId: ID!
}

input RemoveUserFromChatInput {
    chatId: ID!
    userId: ID!
}

input SendMessageInput {
    chatId: ID!
    message: String!
}

input UpdateChatInput {
    id: ID!
    name: String
}


input EditChatMessageInput {
    id: ID!
    message: String!
}

extend type Mutation {
    createChat(input: CreateChatInput!): Chat!
    deleteChat(input: DeleteChatInput!): Chat!

    createPrivatChat(userId: ID!): Chat!

    addUserToChat(input: AddUserToChatInput!): ChatUser!
    removeUserFromChat(input: RemoveUserFromChatInput!): ChatUser!

    sendMessage(input: SendMessageInput!): ChatMessage!
    editChatMessage(input: EditChatMessageInput!): ChatMessage!
    updateChat(input: UpdateChatInput!): Chat!

    markMessageAsRead(messageId: ID!): ChatMessage!
}

type Subscription {
    messageAdded: ChatMessage!
}
