package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"database/sql"
	"errors"
	"mime"
	"path/filepath"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/dokedu/dokedu/backend/internal/db"
	"github.com/dokedu/dokedu/backend/internal/graph/model"
	"github.com/dokedu/dokedu/backend/internal/helper"
	"github.com/dokedu/dokedu/backend/internal/middleware"
	minio "github.com/minio/minio-go/v7"
	"github.com/uptrace/bun"
)

// DeletedAt is the resolver for the deletedAt field.
func (r *entryResolver) DeletedAt(ctx context.Context, obj *db.Entry) (*time.Time, error) {
	if obj.DeletedAt.IsZero() {
		return &obj.DeletedAt.Time, nil
	}

	return nil, nil
}

// User is the resolver for the user field.
func (r *entryResolver) User(ctx context.Context, obj *db.Entry) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var user db.User
	err = r.DB.NewSelect().Model(&user).Where("id = ?", obj.UserID).Where("organisation_id = ?", currentUser.OrganisationID).WhereAllWithDeleted().Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &user, nil
}

// Users is the resolver for the users field.
func (r *entryResolver) Users(ctx context.Context, obj *db.Entry) ([]*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var users []*db.User

	err = r.DB.NewSelect().
		Model(&users).
		Join("JOIN entry_users eu on \"user\".id = eu.user_id").
		Join("JOIN entries e on eu.entry_id = e.id").
		Where("eu.deleted_at is NULL").
		Where("e.id = ?", obj.ID).
		Where("\"user\".organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	return users, nil
}

// Events is the resolver for the events field.
func (r *entryResolver) Events(ctx context.Context, obj *db.Entry) ([]*db.Event, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var events []*db.Event
	err = r.DB.NewSelect().
		Model(&events).
		ColumnExpr("event.*").
		Join("JOIN entry_events ee on event.id = ee.event_id").
		Join("JOIN entries e on ee.entry_id = e.id").
		Where("ee.deleted_at is NULL").
		Where("e.id = ?", obj.ID).
		Where("event.organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return events, nil
}

// Files is the resolver for the files field.
func (r *entryResolver) Files(ctx context.Context, obj *db.Entry) ([]*db.File, error) {
	var files []*db.File
	err := r.DB.NewSelect().
		Model(&files).
		ColumnExpr("file.*").
		Join("JOIN entry_files ef on file.id = ef.file_id").
		Join("JOIN entries e on ef.entry_id = e.id").
		Where("ef.deleted_at is NULL").
		Where("file.organisation_id = ?", obj.OrganisationID).
		Where("e.id = ?", obj.ID).
		Scan(ctx)
	if err != nil {
		return nil, errors.New("failed to get files")
	}

	return files, nil
}

// Tags is the resolver for the tags field.
func (r *entryResolver) Tags(ctx context.Context, obj *db.Entry) ([]*db.Tag, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var tags []*db.Tag
	err = r.DB.NewSelect().
		Model(&tags).
		ColumnExpr("tag.*").
		Join("JOIN entry_tags et on tag.id = et.tag_id").
		Join("JOIN entries e on et.entry_id = e.id").
		Where("et.deleted_at is NULL").
		Where("e.id = ?", obj.ID).
		Where("tag.organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return tags, nil
}

// UserCompetences is the resolver for the userCompetences field.
func (r *entryResolver) UserCompetences(ctx context.Context, obj *db.Entry) ([]*db.UserCompetence, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var userCompetences []*db.UserCompetence
	err = r.DB.NewSelect().
		Model(&userCompetences).
		Where("entry_id = ?", obj.ID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Order("competence_id DESC").
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	return userCompetences, nil
}

// Subjects is the resolver for the subjects field.
func (r *entryResolver) Subjects(ctx context.Context, obj *db.Entry) ([]*db.Competence, error) {
	entryID := obj.ID

	var userCompetences []*db.UserCompetence
	err := r.DB.NewSelect().
		Model(&userCompetences).
		Where("entry_id = ?", entryID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var competenceIDs []string
	for _, uc := range userCompetences {
		competenceIDs = append(competenceIDs, uc.CompetenceID)
	}

	var subjects []*db.Competence

	for _, id := range competenceIDs {
		var competences []*db.Competence
		err := r.DB.NewRaw(`SELECT * FROM get_competence_tree(?)`, id).Scan(ctx, &competences)
		if err != nil {
			return nil, err
		}

		subjects = append(subjects, competences[len(competences)-1])
	}

	var ids []string
	for _, subject := range subjects {
		ids = append(ids, subject.ID)
	}

	var subjects2 []*db.Competence
	err = r.DB.NewSelect().
		Model(&subjects2).
		Where("id IN (?)", bun.In(ids)).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return subjects2, nil
}

// CreateEntry is the resolver for the createEntry field.
func (r *mutationResolver) CreateEntry(ctx context.Context) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	date := time.Now().Format("2006-01-02")

	entry := db.Entry{
		OrganisationID: currentUser.OrganisationID,
		UserID:         currentUser.ID,
		Date:           date,
		Body:           "",
	}
	err = r.DB.NewInsert().Model(&entry).Returning("*").Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// UpdateEntry is the resolver for the updateEntry field.
func (r *mutationResolver) UpdateEntry(ctx context.Context, input model.UpdateEntryInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	entry.ID = input.ID

	q := r.DB.NewUpdate().
		Model(&entry).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Where("id = ?", input.ID).
		Returning("*")

	if input.Date != nil {
		entry.Date = *input.Date
		q = q.Column("date")
	}

	if input.Body != nil {
		entry.Body = *input.Body
		q = q.Column("body")
	}

	err = q.Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// ArchiveEntry is the resolver for the archiveEntry field.
func (r *mutationResolver) ArchiveEntry(ctx context.Context, id string) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	// set deleted_at field to the current time
	entry := db.Entry{
		ID:             id,
		OrganisationID: currentUser.OrganisationID,
		DeletedAt:      bun.NullTime{Time: time.Now()},
	}
	_, err = r.DB.
		NewUpdate().
		Model(&entry).
		Column("deleted_at").
		Where("id = ?", id).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// CreateEntryTag is the resolver for the createEntryTag field.
func (r *mutationResolver) CreateEntryTag(ctx context.Context, input model.CreateEntryTagInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var tag db.Tag
	err = r.DB.
		NewSelect().
		Model(&tag).
		Where("id = ?", input.TagID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	entryTag := db.EntryTag{
		EntryID:        entry.ID,
		TagID:          tag.ID,
		OrganisationID: currentUser.OrganisationID,
	}

	err = r.DB.
		NewInsert().
		Model(&entryTag).
		On("CONFLICT (entry_id, tag_id) DO UPDATE SET deleted_at = null").
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// CreateEntryFile is the resolver for the createEntryFile field.
func (r *mutationResolver) CreateEntryFile(ctx context.Context, input model.CreateEntryFileInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var file db.File
	err = r.DB.
		NewSelect().
		Model(&file).
		Where("id = ?", input.FileID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	entryFile := db.EntryFile{
		EntryID:        entry.ID,
		FileID:         file.ID,
		OrganisationID: currentUser.OrganisationID,
	}

	err = r.DB.
		NewInsert().
		Model(&entryFile).
		On("CONFLICT (entry_id, file_id) DO UPDATE SET deleted_at = null").
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// CreateEntryUser is the resolver for the createEntryUser field.
func (r *mutationResolver) CreateEntryUser(ctx context.Context, input model.CreateEntryUserInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var user db.User
	err = r.DB.
		NewSelect().
		Model(&user).
		Where("id = ?", input.UserID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	entryUser := db.EntryUser{
		EntryID:        entry.ID,
		UserID:         user.ID,
		OrganisationID: currentUser.OrganisationID,
	}

	err = r.DB.
		NewInsert().
		Model(&entryUser).
		On("CONFLICT (entry_id, user_id) DO UPDATE SET deleted_at = null").
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	// update user_competences
	var competences []*db.Competence
	err = r.DB.
		NewSelect().
		Model(&competences).
		Where("\"competence\".organisation_id = ?", currentUser.OrganisationID).
		Join("JOIN user_competences uc on \"competence\".id = uc.competence_id").
		Where("uc.entry_id = ?", entry.ID).
		Where("uc.deleted_at is null").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var userCompetences []*db.UserCompetence
	err = r.DB.
		NewSelect().
		Model(&userCompetences).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Where("entry_id = ?", entry.ID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	for _, competence := range competences {
		var userCompetence *db.UserCompetence
		for _, uc := range userCompetences {
			if uc.CompetenceID == competence.ID && uc.UserID == user.ID {
				userCompetence = uc
				break
			}
		}

		if userCompetence == nil {
			level := 1
			for _, uc := range userCompetences {
				if uc.CompetenceID == competence.ID {
					level = uc.Level
					break
				}
			}

			// create new user competence
			userCompetence = &db.UserCompetence{
				UserID:         user.ID,
				CompetenceID:   competence.ID,
				EntryID:        sql.NullString{String: entry.ID, Valid: true},
				Level:          level,
				OrganisationID: currentUser.OrganisationID,
				CreatedBy:      sql.NullString{String: currentUser.ID, Valid: true},
			}
		} else {
			// update existing user competence
			userCompetence.DeletedAt = bun.NullTime{Time: time.Time{}}
		}

		err = r.DB.
			NewInsert().
			Model(userCompetence).
			Returning("*").
			On("CONFLICT (user_id, competence_id, entry_id) DO UPDATE SET deleted_at = null").
			Returning("*").
			Scan(ctx)
		if errors.Is(err, sql.ErrNoRows) {
			continue
		}
		if err != nil {
			return nil, err
		}
	}

	return &entry, nil
}

// CreateEntryEvent is the resolver for the createEntryEvent field.
func (r *mutationResolver) CreateEntryEvent(ctx context.Context, input model.CreateEntryEventInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var event db.Event
	err = r.DB.
		NewSelect().
		Model(&event).
		Where("id = ?", input.EventID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	entryEvent := db.EntryEvent{
		EntryID:        entry.ID,
		EventID:        event.ID,
		OrganisationID: currentUser.OrganisationID,
	}

	err = r.DB.
		NewInsert().
		Model(&entryEvent).
		Returning("*").
		On("CONFLICT (entry_id, event_id) DO UPDATE SET deleted_at = null").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// CreateEntryCompetence is the resolver for the createEntryCompetence field.
func (r *mutationResolver) CreateEntryCompetence(ctx context.Context, input model.CreateEntryCompetenceInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var competence db.Competence
	err = r.DB.
		NewSelect().
		Model(&competence).
		Where("id = ?", input.CompetenceID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var users []*db.User
	err = r.DB.
		NewSelect().
		Model(&users).
		ColumnExpr("\"user\".*").
		Join("JOIN entry_users eu on \"user\".id = eu.user_id").
		Join("JOIN entries e on eu.entry_id = e.id").
		Where("eu.deleted_at is NULL").
		Where("e.id = ?", entry.ID).
		Where("\"user\".organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var userCompetences []*db.UserCompetence
	for _, user := range users {
		userCompetences = append(userCompetences, &db.UserCompetence{
			UserID:         user.ID,
			CompetenceID:   competence.ID,
			EntryID:        sql.NullString{String: entry.ID, Valid: true},
			Level:          1,
			OrganisationID: currentUser.OrganisationID,
			CreatedBy:      sql.NullString{String: currentUser.ID, Valid: true},
		})
	}

	err = r.DB.NewInsert().
		Model(&userCompetences).
		On("CONFLICT (user_id, competence_id, entry_id) DO UPDATE SET deleted_at = null").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// DeleteEntryTag is the resolver for the deleteEntryTag field.
func (r *mutationResolver) DeleteEntryTag(ctx context.Context, input model.DeleteEntryTagInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var entryTag db.EntryTag
	err = r.DB.
		NewDelete().
		Model(&entryTag).
		Where("entry_id = ?", input.EntryID).
		Where("tag_id = ?", input.TagID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// DeleteEntryFile is the resolver for the deleteEntryFile field.
func (r *mutationResolver) DeleteEntryFile(ctx context.Context, input model.DeleteEntryFileInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var entryFile db.EntryFile
	err = r.DB.
		NewDelete().
		Model(&entryFile).
		Where("entry_id = ?", input.EntryID).
		Where("file_id = ?", input.FileID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Where("deleted_at IS NULL").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// DeleteEntryUser is the resolver for the deleteEntryUser field.
func (r *mutationResolver) DeleteEntryUser(ctx context.Context, input model.DeleteEntryUserInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var entryUser db.EntryUser
	err = r.DB.
		NewDelete().
		Model(&entryUser).
		Where("entry_id = ?", input.EntryID).
		Where("user_id = ?", input.UserID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	// remove user competences for this entry for this user
	var userCompetences []*db.UserCompetence
	err = r.DB.
		NewDelete().
		Model(&userCompetences).
		Where("entry_id = ?", input.EntryID).
		Where("user_id = ?", input.UserID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// DeleteEntryEvent is the resolver for the deleteEntryEvent field.
func (r *mutationResolver) DeleteEntryEvent(ctx context.Context, input model.DeleteEntryEventInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var entryEvent db.EntryEvent
	err = r.DB.
		NewDelete().
		Model(&entryEvent).
		Where("entry_id = ?", input.EntryID).
		Where("event_id = ?", input.EventID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// DeleteEntryCompetence is the resolver for the deleteEntryCompetence field.
func (r *mutationResolver) DeleteEntryCompetence(ctx context.Context, input model.DeleteEntryCompetenceInput) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var userCompetences []*db.UserCompetence
	err = r.DB.
		NewDelete().
		Model(&userCompetences).
		Where("entry_id = ?", input.EntryID).
		Where("competence_id = ?", input.CompetenceID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// UpdateEntryUserCompetenceLevel is the resolver for the updateEntryUserCompetenceLevel field.
func (r *mutationResolver) UpdateEntryUserCompetenceLevel(ctx context.Context, input model.UpdateEntryUserCompetenceLevel) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.
		NewSelect().
		Model(&entry).
		Where("id = ?", input.EntryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var userCompetence db.UserCompetence
	userCompetence.Level = input.Level
	err = r.DB.
		NewUpdate().
		Model(&userCompetence).
		Column("level").
		Where("entry_id = ?", input.EntryID).
		Where("competence_id = ?", input.CompetenceID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// UploadFileToEntry is the resolver for the uploadFileToEntry field.
func (r *mutationResolver) UploadFileToEntry(ctx context.Context, entryID string, file graphql.Upload) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.NewSelect().Model(&entry).Where("id = ?", entryID).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, errors.New("entry not found")
	}

	var f db.File
	f.Name = file.Filename
	f.FileType = "blob"
	f.OrganisationID = currentUser.OrganisationID
	f.Size = file.Size

	mimeFileType := mime.TypeByExtension(filepath.Ext(file.Filename))
	f.MimeType = mimeFileType

	var bucket db.Bucket
	err = r.DB.NewSelect().
		Model(&bucket).
		Where("name = ?", "entries").
		Where("shared = false").
		Where("user_id IS NULL").
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if errors.Is(err, sql.ErrNoRows) {
		//	create bucket
		bucket.Name = "entries"
		bucket.Shared = false
		bucket.OrganisationID = currentUser.OrganisationID
		err = r.DB.NewInsert().Model(&bucket).Returning("*").Scan(ctx)
		if err != nil {
			return nil, errors.New("failed to create bucket")
		}

		err = r.MinioClient.MakeBucket(ctx, bucket.ID, minio.MakeBucketOptions{})
		if err != nil {
			return nil, errors.New("failed to create minio bucket")
		}
	}
	if err != nil {
		return nil, errors.New("failed to find bucket")
	}

	f.BucketID = bucket.ID

	err = r.DB.NewInsert().Model(&f).Returning("*").Scan(ctx)
	if err != nil {
		return nil, errors.New("failed to create file")
	}

	var entryFile db.EntryFile
	entryFile.EntryID = entry.ID
	entryFile.FileID = f.ID
	entryFile.OrganisationID = currentUser.OrganisationID
	err = r.DB.NewInsert().Model(&entryFile).Returning("*").Scan(ctx)
	if err != nil {
		return nil, errors.New("failed to create entry file")
	}

	// Upload the file to specific bucket with the file id
	_, err = r.MinioClient.PutObject(ctx, bucket.ID, f.ID, file.File, f.Size, minio.PutObjectOptions{
		ContentType: file.ContentType,
	})
	if err != nil {
		return nil, errors.New("failed to upload file")
	}

	return &entry, nil
}

// RemoveFileFromEntry is the resolver for the removeFileFromEntry field.
func (r *mutationResolver) RemoveFileFromEntry(ctx context.Context, entryID string, fileID string) (*db.File, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.NewSelect().
		Model(&entry).
		Where("id = ?", entryID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, errors.New("entry not found")
	}

	var entryFile db.EntryFile
	err = r.DB.NewSelect().
		Model(&entryFile).
		Where("entry_id = ?", entryID).
		Where("file_id = ?", fileID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, errors.New("entry file not found")
	}

	err = r.DB.NewDelete().
		Model(&entryFile).
		Where("entry_id = ?", entryID).
		Where("file_id = ?", fileID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if errors.Is(err, sql.ErrNoRows) {
		//
	} else if err != nil {
		return nil, errors.New("failed to delete entry file")
	}

	var file db.File
	err = r.DB.NewSelect().
		Model(&file).
		Where("id = ?", fileID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, errors.New("file not found")
	}

	return &file, nil
}

// Entry is the resolver for the entry field.
func (r *queryResolver) Entry(ctx context.Context, id string) (*db.Entry, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	var entry db.Entry
	err = r.DB.NewSelect().Model(&entry).Where("id = ?", id).Where("organisation_id = ?", currentUser.OrganisationID).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &entry, nil
}

// Entries is the resolver for the entries field.
func (r *queryResolver) Entries(ctx context.Context, limit *int, offset *int, filter *model.EntryFilterInput, sortBy *model.EntrySortBy, search *string) (*model.EntryConnection, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	pageLimit, pageOffset := helper.SetPageLimits(limit, offset)

	var entries []*db.Entry
	query := r.DB.NewSelect().
		Distinct().
		Model(&entries).
		Join("LEFT JOIN entry_users eu ON \"entry\".id = eu.entry_id").
		Where("eu.deleted_at IS NULL").
		Join("LEFT JOIN entry_tags et ON \"entry\".id = et.entry_id").
		Where("et.deleted_at IS NULL").
		Where("\"entry\".organisation_id = ?", currentUser.OrganisationID).
		Limit(pageLimit).Offset(pageOffset)

	if filter != nil {
		if filter.Users != nil && len(filter.Users) > 0 {
			query.Where("eu.user_id IN (?)", bun.In(filter.Users))
		}
		if filter.Authors != nil && len(filter.Authors) > 0 {
			query.Where("\"entry\".user_id IN (?)", bun.In(filter.Authors))
		}
		if filter.Tags != nil && len(filter.Tags) > 0 {
			query.Where("et.tag_id IN (?)", bun.In(filter.Tags))
			query.Where("(SELECT COUNT(DISTINCT et2.tag_id) FROM entry_tags et2 WHERE et2.entry_id = \"entry\".id) >= ?", len(filter.Tags))
		}
	}

	if sortBy != nil {
		switch *sortBy {
		case model.EntrySortByCreatedAtAsc:
			query.Order("entry.created_at ASC")
		case model.EntrySortByCreatedAtDesc:
			query.Order("entry.created_at DESC")
		case model.EntrySortByDateAsc:
			query.Order("entry.date ASC")
		case model.EntrySortByDateDesc:
			query.Order("entry.date DESC")
		default:
			query.Order("entry.created_at DESC")
		}
	}

	count, err := query.ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	// Page info
	page, err := helper.CreatePageInfo(pageLimit, pageOffset, count)
	if err != nil {
		return nil, err
	}

	page.CurrentPage = pageOffset / pageLimit
	return &model.EntryConnection{
		Edges:      entries,
		PageInfo:   page,
		TotalCount: count,
	}, nil
}

// Entry returns EntryResolver implementation.
func (r *Resolver) Entry() EntryResolver { return &entryResolver{r} }

type entryResolver struct{ *Resolver }
