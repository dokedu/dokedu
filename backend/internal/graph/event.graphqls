type Event {
    id: ID!
    title: String!
    image: File
    body: String
    startsAt: Time!
    endsAt: Time!
    recurrence: [String]

    competences: [Competence!]!

    createdAt: Time!
    deletedAt: Time
}

type EventConnection {
    edges: [Event]
    pageInfo: PageInfo!
    totalCount: Int!
}

enum EventOrderBy {
    startsAt_ASC
    startsAt_DESC
    endsAt_ASC
    endsAt_DESC
}

input EventFilterInput {
    from: Time
    to: Time
    deleted: Boolean
}

input ExportEventsInput {
    from: String!
    to: String!
    deleted: Boolean!
}

type ExportEventsPayload {
    id: ID!
    title: String!
    body: String!
    startsAt: String!
    endsAt: String!
    subjects: String!
}

extend type Query {
    event(id: ID!): Event!
    events(limit: Int, offset: Int, filter: EventFilterInput, order: EventOrderBy, search: String): EventConnection!
    exportEvents(input: ExportEventsInput!): [ExportEventsPayload]!
}

input CreateEventInput {
    title: String!
    image: Upload
    body: String
    startsAt: String
    endsAt: String
    recurrence: [String]
}

input UpdateEventInput {
    id: ID!
    title: String
    image: Upload
    body: String
    startsAt: String
    endsAt: String
    recurrence: [String]
}

input AddEventCompetenceInput {
    eventId: ID!
    competenceId: ID!
}

extend type Mutation {
    createEvent(input: CreateEventInput!): Event!
    updateEvent(input: UpdateEventInput!): Event!
    toggleEventCompetence(input: AddEventCompetenceInput!): Event!
    archiveEvent(id: ID!): Event!
}