package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"time"

	"github.com/dokedu/dokedu/backend/internal/database/db"
	"github.com/dokedu/dokedu/backend/internal/dataloaders"
	"github.com/dokedu/dokedu/backend/internal/graph/model"
	"github.com/dokedu/dokedu/backend/internal/middleware"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/samber/lo"
)

// UpdateUserAttendance is the resolver for the updateUserAttendance field.
func (r *mutationResolver) UpdateUserAttendance(ctx context.Context, input model.UpdateUserAttendanceInput) (*db.UserAttendance, error) {
	panic(fmt.Errorf("not implemented: UpdateUserAttendance - updateUserAttendance"))
}

// UserAttendances is the resolver for the userAttendances field.
func (r *queryResolver) UserAttendances(ctx context.Context, date time.Time) ([]*db.UserAttendance, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	// TODO: in case for the requested day there are no user attendances for all students, we must create them before returning
	userAttendances, err := r.DB.UserAttendanceListByDate(ctx, db.UserAttendanceListByDateParams{
		Date:           pgtype.Date{Time: date, Valid: true},
		OrganisationID: currentUser.OrganisationID,
	})

	return lo.ToSlicePtr(userAttendances), nil
}

// Date is the resolver for the date field.
func (r *userAttendanceResolver) Date(ctx context.Context, obj *db.UserAttendance) (*time.Time, error) {
	return &obj.Date.Time, nil
}

// User is the resolver for the user field.
func (r *userAttendanceResolver) User(ctx context.Context, obj *db.UserAttendance) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	return dataloaders.GetUser(ctx, obj.UserID, currentUser)
}

// UserAttendance returns UserAttendanceResolver implementation.
func (r *Resolver) UserAttendance() UserAttendanceResolver { return &userAttendanceResolver{r} }

type userAttendanceResolver struct{ *Resolver }
