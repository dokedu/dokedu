package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/dokedu/dokedu/backend/internal/dataloaders"
	"github.com/dokedu/dokedu/backend/internal/db"
	"github.com/dokedu/dokedu/backend/internal/middleware"
)

// SetUserAttendanceState is the resolver for the setUserAttendanceState field.
func (r *mutationResolver) SetUserAttendanceState(ctx context.Context, userID string, date time.Time, state db.UserAttendanceState) (*db.UserAttendance, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var userAttendance db.UserAttendance
	err = r.DB.NewSelect().
		Model(&userAttendance).
		Where("user_id = ?", userID).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Where("date = ?", date).
		Scan(ctx)
	if errors.Is(err, sql.ErrNoRows) {
		userAttendance = db.UserAttendance{
			UserID:         userID,
			OrganisationID: currentUser.OrganisationID,
			Date:           date,
			State:          state,
			CreatedBy:      currentUser.ID,
		}
		err = r.DB.NewInsert().
			Model(&userAttendance).
			Scan(ctx)
		if err != nil {
			return &userAttendance, err
		}
	}
	if err != nil {
		return nil, err
	}

	userAttendance.State = state

	err = r.DB.NewUpdate().
		Model(&userAttendance).
		Where("id = ?", userAttendance.ID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return &userAttendance, nil
}

// UpdateDailyAttendance is the resolver for the updateDailyAttendance field.
func (r *mutationResolver) UpdateDailyAttendance(ctx context.Context, date time.Time, state db.UserAttendanceState) ([]*db.UserAttendance, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var users []*db.User
	count, err := r.DB.NewSelect().
		Model(&users).
		Where("role = 'student'").
		Where("organisation_id = ?", currentUser.OrganisationID).
		Count(ctx)
	if err != nil {
		return nil, err
	}

	var userAttendances []*db.UserAttendance
	err = r.DB.NewUpdate().
		Model(&userAttendances).
		Set("state = ?", state).
		Where("date = ?", date).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Returning("*").
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	if len(userAttendances) != count {
		err = r.DB.NewSelect().
			Model(&userAttendances).
			Where("date = ?", date).
			Where("organisation_id = ?", currentUser.OrganisationID).
			Scan(ctx)
		if err != nil {
			return nil, err
		}

		var unknownUserAttendance []*db.UserAttendance
		for _, user := range users {
			var found bool

			for _, userAttendance := range userAttendances {
				if userAttendance.UserID == user.ID {
					found = true
					break
				}
			}

			if !found {
				unknownUserAttendance = append(unknownUserAttendance, &db.UserAttendance{
					UserID:         user.ID,
					Date:           date,
					State:          state,
					CreatedBy:      currentUser.ID,
					OrganisationID: currentUser.OrganisationID,
				})
			}
		}

		if len(unknownUserAttendance) != 0 {
			err = r.DB.NewInsert().
				Model(&unknownUserAttendance).
				Scan(ctx)
			if err != nil {
				return nil, err
			}

			userAttendances = append(userAttendances, unknownUserAttendance...)
		}
	}

	err = r.DB.NewSelect().
		Model(&userAttendances).
		Where("date = ?", date).
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return userAttendances, nil
}

// UserAttendanceOverview is the resolver for the userAttendanceOverview field.
func (r *queryResolver) UserAttendanceOverview(ctx context.Context, date time.Time) ([]*db.UserAttendance, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	var users []*db.User
	err = r.DB.NewSelect().
		Model(&users).
		Where("role = 'student'").
		Where("organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	var count int
	var userAttendances []*db.UserAttendance
	count, err = r.DB.NewSelect().
		Model(&userAttendances).
		Where("date = ?", date).
		Where("organisation_id = ?", currentUser.OrganisationID).
		ScanAndCount(ctx)
	if err != nil {
		return nil, err
	}

	if count != len(users) {
		var unknownUserAttendance []*db.UserAttendance

		for _, user := range users {
			var found bool

			for _, userAttendance := range userAttendances {
				if userAttendance.UserID == user.ID {
					found = true
					break
				}
			}

			if !found {
				unknownUserAttendance = append(unknownUserAttendance, &db.UserAttendance{
					UserID:         user.ID,
					Date:           date,
					State:          db.UserAttendanceStateUnknown,
					CreatedBy:      currentUser.ID,
					OrganisationID: currentUser.OrganisationID,
				})
			}
		}

		if len(unknownUserAttendance) != 0 {
			err = r.DB.NewInsert().
				Model(&unknownUserAttendance).
				Scan(ctx)
			if err != nil {
				return nil, err
			}

			userAttendances = append(userAttendances, unknownUserAttendance...)
		}
	}

	err = r.DB.NewSelect().
		Model(&userAttendances).
		Where("date = ?", date).
		Join("JOIN users ON users.id = user_attendance.user_id").
		Order("users.first_name ASC").
		Order("users.last_name ASC").
		Where("user_attendance.organisation_id = ?", currentUser.OrganisationID).
		Scan(ctx)
	if err != nil {
		return nil, err
	}

	return userAttendances, nil
}

// User is the resolver for the user field.
func (r *userAttendanceResolver) User(ctx context.Context, obj *db.UserAttendance) (*db.User, error) {
	currentUser, err := middleware.GetUser(ctx)
	if err != nil {
		return nil, nil
	}

	return dataloaders.GetUser(ctx, obj.UserID, currentUser)
}

// UserAttendance returns UserAttendanceResolver implementation.
func (r *Resolver) UserAttendance() UserAttendanceResolver { return &userAttendanceResolver{r} }

type userAttendanceResolver struct{ *Resolver }
